From 4c5103af608e4b1edabe55b8e4c8da96fc75de0e Mon Sep 17 00:00:00 2001
From: Lucas Dietrich <lucas.dietrich@socomec.com>
Date: Thu, 5 Oct 2023 17:22:37 +0200
Subject: [PATCH] Refactoring

---
 .clang-format                   |   9 +-
 .editorconfig                   |  63 ----
 .vscode/settings.json           |   3 +
 CMakeLists.txt                  |   2 +-
 include/caniot/caniot.h         |  40 +--
 include/caniot/caniot_private.h |   8 +-
 include/caniot/classes.h        |  52 +--
 include/caniot/controller.h     |  58 ++--
 include/caniot/datatype.h       |  28 +-
 include/caniot/device.h         | 207 ++++++------
 include/caniot/errors.h         |  38 +--
 readme.md                       |   8 +-
 samples/attributes/attr.c       |  12 +-
 samples/sim/canbus.c            |   2 +-
 samples/sim/controllers.c       |  42 +--
 samples/sim/devices.c           |  74 ++---
 samples/sim/header.h            |   8 +-
 samples/sim/sim.c               |  14 +-
 src/caniot.c                    | 102 +++---
 src/classes.c                   |  70 ++--
 src/controller.c                | 261 +++++++--------
 src/datatype.c                  |   6 +-
 src/device.c                    | 573 ++++++++++++++++----------------
 tests/test.c                    | 198 +++++------
 24 files changed, 888 insertions(+), 990 deletions(-)
 delete mode 100644 .editorconfig

diff --git a/.clang-format b/.clang-format
index 151e132..74d6bf2 100644
--- a/.clang-format
+++ b/.clang-format
@@ -31,8 +31,8 @@ AttributeMacros:
   - __subsystem
 BreakBeforeBraces: Linux
 ColumnLimit: 90 # 80 would be ideal, but strict "80" make the code too long
-ConstructorInitializerIndentWidth: 8
-ContinuationIndentWidth: 8
+ConstructorInitializerIndentWidth: 4
+ContinuationIndentWidth: 4
 ForEachMacros:
   - 'FOR_EACH'
   - 'FOR_EACH_FIXED_ARG'
@@ -78,9 +78,10 @@ IncludeCategories:
   - Regex: '.*'
     Priority: 3
 IndentCaseLabels: false
-IndentWidth: 8
-# SpaceBeforeParens: ControlStatementsExceptControlMacros # clang-format >= 13.0
+IndentWidth: 4
 UseTab: Always
+TabWidth: 4
+# SpaceBeforeParens: ControlStatementsExceptControlMacros # clang-format >= 13.0
 WhitespaceSensitiveMacros:
   - STRINGIFY
   - Z_STRINGIFY
\ No newline at end of file
diff --git a/.editorconfig b/.editorconfig
deleted file mode 100644
index 31f2c27..0000000
--- a/.editorconfig
+++ /dev/null
@@ -1,63 +0,0 @@
-; https://docs.microsoft.com/fr-fr/visualstudio/ide/cpp-editorconfig-properties?view=vs-2019
-
-[*]
-cpp_indent_braces=false
-cpp_indent_multi_line_relative_to=innermost_parenthesis
-cpp_indent_within_parentheses=align_to_parenthesis
-cpp_indent_preserve_within_parentheses=false
-cpp_indent_case_labels=false
-cpp_indent_case_contents=true
-cpp_indent_case_contents_when_block=false
-cpp_indent_lambda_braces_when_parameter=true
-cpp_indent_goto_labels=one_left
-cpp_indent_preprocessor=leftmost_column
-cpp_indent_access_specifiers=false
-cpp_indent_namespace_contents=true
-cpp_indent_preserve_comments=true
-cpp_new_line_before_open_brace_namespace=ignore
-cpp_new_line_before_open_brace_type=ignore
-cpp_new_line_before_open_brace_function=ignore
-cpp_new_line_before_open_brace_block=same_line
-cpp_new_line_before_open_brace_lambda=ignore
-cpp_new_line_scope_braces_on_separate_lines=false
-cpp_new_line_close_brace_same_line_empty_type=false
-cpp_new_line_close_brace_same_line_empty_function=false
-cpp_new_line_before_catch=true
-cpp_new_line_before_else=false
-cpp_new_line_before_while_in_do_while=false
-cpp_space_before_function_open_parenthesis=remove
-cpp_space_within_parameter_list_parentheses=false
-cpp_space_between_empty_parameter_list_parentheses=false
-cpp_space_after_keywords_in_control_flow_statements=true
-cpp_space_within_control_flow_statement_parentheses=false
-cpp_space_before_lambda_open_parenthesis=false
-cpp_space_within_cast_parentheses=false
-cpp_space_after_cast_close_parenthesis=false
-cpp_space_within_expression_parentheses=false
-cpp_space_before_block_open_brace=true
-cpp_space_between_empty_braces=false
-cpp_space_before_initializer_list_open_brace=false
-cpp_space_within_initializer_list_braces=true
-cpp_space_preserve_in_initializer_list=true
-cpp_space_before_open_square_bracket=false
-cpp_space_within_square_brackets=false
-cpp_space_before_empty_square_brackets=false
-cpp_space_between_empty_square_brackets=false
-cpp_space_group_square_brackets=true
-cpp_space_within_lambda_brackets=false
-cpp_space_between_empty_lambda_brackets=false
-cpp_space_before_comma=false
-cpp_space_after_comma=true
-cpp_space_remove_around_member_operators=true
-cpp_space_before_inheritance_colon=true
-cpp_space_before_constructor_colon=true
-cpp_space_remove_before_semicolon=true
-cpp_space_after_semicolon=false
-cpp_space_remove_around_unary_operator=true
-cpp_space_around_binary_operator=insert
-cpp_space_around_assignment_operator=insert
-cpp_space_pointer_reference_alignment=right
-cpp_space_around_ternary_operator=insert
-cpp_wrap_preserve_blocks=one_liners
-indent_size = 8
-indent_style = tab
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 4d2cba0..f0cbca1 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -26,4 +26,7 @@
         "*.tcc": "c"
     },
     "editor.rulers": [80],
+    "editor.indentSize": "tabSize",
+    "editor.tabSize": 4,
+    "editor.autoIndent": "full"
 }
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d6648d..f5784ba 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -32,7 +32,7 @@ add_library(caniotlib STATIC ${CANIOT_SOURCES} ${CANIOT_HEADERS})
 
 target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_DEVICE_DRIVERS_API=0)
 target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_CTRL_DRIVERS_API=1)
-target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_LOG_LEVEL=4)
+target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_LOG_LEVEL=3)
 target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_ASSERT=1)
 target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_MAX_PENDING_QUERIES=4)
 target_compile_definitions(caniotlib PUBLIC CONFIG_CANIOT_ATTRIBUTE_NAME=1)
diff --git a/include/caniot/caniot.h b/include/caniot/caniot.h
index afd6084..5e84586 100644
--- a/include/caniot/caniot.h
+++ b/include/caniot/caniot.h
@@ -27,7 +27,7 @@ extern "C" {
 #define CANIOT_VERSION 2u
 
 #define CANIOT_ID(t, q, c, d, e)                                                         \
-	((t & 0x3U) | ((q & 0x1U) << 2U) | ((c & 0x7U) << 3U) | ((d & 0x7U) << 6U) |     \
+	((t & 0x3U) | ((q & 0x1U) << 2U) | ((c & 0x7U) << 3U) | ((d & 0x7U) << 6U) |         \
 	 ((e & 0x3U) << 9U))
 
 #define CANIOT_CLASS_BROADCAST (0x7U)
@@ -36,8 +36,8 @@ extern "C" {
 #define CANIOT_DID(class_id, sub_id)                                                     \
 	((caniot_did_t)((class_id)&0x7U) | (((sub_id)&0x7U) << 3U))
 #define CANIOT_DID_FROM_RAW(raw) ((raw)&CANIOT_DID_BROADCAST)
-#define CANIOT_DID_CLS(did)	 ((caniot_device_class_t)((did)&0x7U))
-#define CANIOT_DID_SID(did)	 ((caniot_device_subid_t)(((did) >> 3U) & 0x7U))
+#define CANIOT_DID_CLS(did)		 ((caniot_device_class_t)((did)&0x7U))
+#define CANIOT_DID_SID(did)		 ((caniot_device_subid_t)(((did) >> 3U) & 0x7U))
 
 #define CANIOT_DID_BROADCAST CANIOT_DID(CANIOT_CLASS_BROADCAST, 0x7U)
 #define CANIOT_DID_MAX_COUNT 63u
@@ -54,16 +54,16 @@ extern "C" {
 /* seconds */
 #define CANIOT_TELEMETRY_PERIOD_DEFAULT_MS 60000u
 
-#define CANIOT_TELEMETRY_ENDPOINT_DEFAULT (1u << CANIOT_ENDPOINT_BOARD_CONTROL)
+#define CANIOT_TELEMETRY_ENDPOINT_DEFAULT CANIOT_ENDPOINT_BOARD_CONTROL
 
 #define CANIOT_TIMEZONE_DEFAULT 3600U
 #define CANIOT_LOCATION_REGION_DEFAULT                                                   \
-	{                                                                                \
-		'E', 'U'                                                                 \
+	{                                                                                    \
+		'E', 'U'                                                                         \
 	}
 #define CANIOT_LOCATION_COUNTRY_DEFAULT                                                  \
-	{                                                                                \
-		'F', 'R'                                                                 \
+	{                                                                                    \
+		'F', 'R'                                                                         \
 	}
 
 #define CANIOT_ID_GET_TYPE(id)	   ((caniot_frame_type_t)(id & 0x3U))
@@ -75,7 +75,7 @@ extern "C" {
 #define CANIOT_ADDR_LEN sizeof("0x3f")
 
 /* Defines for emulated devices */
-#define CANIOT_EMU_CLASS	0x7u
+#define CANIOT_EMU_CLASS		0x7u
 #define CNAIOT_MAGIC_NUMBER_EMU 0xFFFFFFFFu
 
 typedef enum {
@@ -101,8 +101,8 @@ typedef enum {
 } caniot_device_subid_t;
 
 typedef enum {
-	CANIOT_FRAME_TYPE_COMMAND	  = 0,
-	CANIOT_FRAME_TYPE_TELEMETRY	  = 1,
+	CANIOT_FRAME_TYPE_COMMAND		  = 0,
+	CANIOT_FRAME_TYPE_TELEMETRY		  = 1,
 	CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE = 2,
 	CANIOT_FRAME_TYPE_READ_ATTRIBUTE  = 3,
 } caniot_frame_type_t;
@@ -113,9 +113,9 @@ typedef enum {
 } caniot_frame_dir_t;
 
 typedef enum {
-	CANIOT_ENDPOINT_APP	      = 0,
-	CANIOT_ENDPOINT_1	      = 1,
-	CANIOT_ENDPOINT_2	      = 2,
+	CANIOT_ENDPOINT_APP			  = 0,
+	CANIOT_ENDPOINT_1			  = 1,
+	CANIOT_ENDPOINT_2			  = 2,
 	CANIOT_ENDPOINT_BOARD_CONTROL = 3,
 } caniot_endpoint_t;
 
@@ -231,7 +231,7 @@ static inline void caniot_clear_frame(struct caniot_frame *frame)
 }
 
 static inline void caniot_copy_frame(struct caniot_frame *dst,
-				     const struct caniot_frame *src)
+									 const struct caniot_frame *src)
 {
 	memcpy(dst, src, sizeof(struct caniot_frame));
 }
@@ -260,15 +260,15 @@ int caniot_explain_frame_str(const struct caniot_frame *frame, char *buf, size_t
 int caniot_build_query_telemetry(struct caniot_frame *frame, uint8_t endpoint);
 
 int caniot_build_query_command(struct caniot_frame *frame,
-			       uint8_t endpoint,
-			       const uint8_t *buf,
-			       uint8_t size);
+							   uint8_t endpoint,
+							   const uint8_t *buf,
+							   uint8_t size);
 
 int caniot_build_query_read_attribute(struct caniot_frame *frame, uint16_t key);
 
 int caniot_build_query_write_attribute(struct caniot_frame *frame,
-				       uint16_t key,
-				       uint32_t value);
+									   uint16_t key,
+									   uint32_t value);
 
 caniot_did_t caniot_frame_get_did(struct caniot_frame *frame);
 
diff --git a/include/caniot/caniot_private.h b/include/caniot/caniot_private.h
index 39818de..f6a2bb3 100644
--- a/include/caniot/caniot_private.h
+++ b/include/caniot/caniot_private.h
@@ -27,7 +27,7 @@
 #define snprintf snprintf_P
 #define F(x)	 PSTR(x)
 #define memcpy_P memcpy_P
-#define ROM	 PROGMEM
+#define ROM		 PROGMEM
 #define Z_ASSERT(x)
 
 #if CONFIG_CANIOT_ATTRIBUTE_NAME
@@ -107,9 +107,9 @@ extern void __assert(bool statement);
 #endif /* CANIOT_LOG_LEVEL >= 1 */
 
 #if !defined(__ZEPHYR__)
-#define MIN(a, b)		       ((a) < (b) ? (a) : (b))
-#define MAX(a, b)		       ((a) > (b) ? (a) : (b))
-#define ARRAY_SIZE(a)		       (sizeof(a) / sizeof((a)[0]))
+#define MIN(a, b)					   ((a) < (b) ? (a) : (b))
+#define MAX(a, b)					   ((a) > (b) ? (a) : (b))
+#define ARRAY_SIZE(a)				   (sizeof(a) / sizeof((a)[0]))
 #define CONTAINER_OF(ptr, type, field) ((type *)(((char *)(ptr)) - offsetof(type, field)))
 #endif
 
diff --git a/include/caniot/classes.h b/include/caniot/classes.h
index da3d6cc..0ca2f56 100644
--- a/include/caniot/classes.h
+++ b/include/caniot/classes.h
@@ -4,13 +4,13 @@
 #include "caniot.h"
 #include "datatype.h"
 
-#define CANIOT_CLASS0_IO_COUNT	      8u
+#define CANIOT_CLASS0_IO_COUNT		  8u
 #define CANIOT_BLC0_TELEMETRY_BUF_LEN 7
-#define CANIOT_BLC0_COMMAND_BUF_LEN   2
+#define CANIOT_BLC0_COMMAND_BUF_LEN	  2
 
-#define CANIOT_CLASS1_IO_COUNT	      19u
+#define CANIOT_CLASS1_IO_COUNT		  19u
 #define CANIOT_BLC1_TELEMETRY_BUF_LEN 8
-#define CANIOT_BLC1_COMMAND_BUF_LEN   7
+#define CANIOT_BLC1_COMMAND_BUF_LEN	  7
 
 struct caniot_blc0_telemetry {
 	uint8_t dio;
@@ -49,41 +49,41 @@ void caniot_blc0_command_init(struct caniot_blc0_command *cmd);
 void caniot_blc1_command_init(struct caniot_blc1_command *cmd);
 
 int caniot_blc0_telemetry_ser(const struct caniot_blc0_telemetry *t,
-			      uint8_t *buf,
-			      uint8_t *len);
+							  uint8_t *buf,
+							  uint8_t *len);
 int caniot_blc0_telemetry_get(struct caniot_blc0_telemetry *t,
-			      const uint8_t *buf,
-			      uint8_t len);
+							  const uint8_t *buf,
+							  uint8_t len);
 
 int caniot_blc0_command_ser(const struct caniot_blc0_command *t,
-			    uint8_t *buf,
-			    uint8_t *len);
+							uint8_t *buf,
+							uint8_t *len);
 int caniot_blc0_command_get(struct caniot_blc0_command *t,
-			    const uint8_t *buf,
-			    uint8_t len);
+							const uint8_t *buf,
+							uint8_t len);
 
 int caniot_blc1_cmd_set_xps(caniot_complex_digital_cmd_t xps,
-			    uint8_t *buf,
-			    uint8_t len,
-			    uint8_t n);
+							uint8_t *buf,
+							uint8_t len,
+							uint8_t n);
 
 int caniot_blc1_cmd_parse_xps(caniot_complex_digital_cmd_t *xps,
-			      const uint8_t *buf,
-			      uint8_t len,
-			      uint8_t n);
+							  const uint8_t *buf,
+							  uint8_t len,
+							  uint8_t n);
 
 int caniot_blc1_telemetry_ser(const struct caniot_blc1_telemetry *t,
-			      uint8_t *buf,
-			      uint8_t *len);
+							  uint8_t *buf,
+							  uint8_t *len);
 int caniot_blc1_telemetry_get(struct caniot_blc1_telemetry *t,
-			      const uint8_t *buf,
-			      uint8_t len);
+							  const uint8_t *buf,
+							  uint8_t len);
 
 int caniot_blc1_command_ser(const struct caniot_blc1_command *t,
-			    uint8_t *buf,
-			    uint8_t *len);
+							uint8_t *buf,
+							uint8_t *len);
 int caniot_blc1_command_get(struct caniot_blc1_command *t,
-			    const uint8_t *buf,
-			    uint8_t len);
+							const uint8_t *buf,
+							uint8_t len);
 
 #endif /* _CANIOT_CLASSES_H_ */
\ No newline at end of file
diff --git a/include/caniot/controller.h b/include/caniot/controller.h
index dda0c58..1e4e4f6 100644
--- a/include/caniot/controller.h
+++ b/include/caniot/controller.h
@@ -19,7 +19,7 @@ struct caniot_pendq_time_handle {
 	union {
 		uint32_t timeout; /* Timeout if response is not yet received */
 		uint32_t delay;	  /* Delay the query took when response is received */
-	};			  /* in ms */
+	};					  /* in ms */
 
 	/* next query in the time queue
 	 * @see
@@ -71,7 +71,7 @@ struct caniot_pendq {
 
 	union {
 		struct caniot_pendq_time_handle tie; /* for timeout queue */
-		struct caniot_pendq *next;	     /* for memory allocation */
+		struct caniot_pendq *next;			 /* for memory allocation */
 	};
 
 	/**
@@ -190,16 +190,16 @@ typedef struct {
  * @param user_data User data (passed when initializing the controller)
  */
 typedef bool (*caniot_controller_event_cb_t)(const caniot_controller_event_t *ev,
-					     void *user_data);
+											 void *user_data);
 
 /**
  * @brief Discovery callback
  * Return true to continue discovery, false to stop it
  */
 typedef bool (*caniot_controller_discovery_cb_t)(struct caniot_controller *ctrl,
-						 caniot_did_t did,
-						 const struct caniot_frame *frame,
-						 void *user_data);
+												 caniot_did_t did,
+												 const struct caniot_frame *frame,
+												 void *user_data);
 
 typedef enum {
 	/* A BROADCAST frame is sent */
@@ -236,7 +236,7 @@ struct caniot_discovery_params {
 
 	union {
 		caniot_endpoint_t endpoint; /* if type is TELEMETRY */
-		uint16_t attr_key;	    /* if type is ATTRIBUTE */
+		uint16_t attr_key;			/* if type is ATTRIBUTE */
 	} data;
 };
 
@@ -294,8 +294,8 @@ typedef struct caniot_controller caniot_controller_t;
  * @return int
  */
 int caniot_controller_init(struct caniot_controller *ctrl,
-			   caniot_controller_event_cb_t cb,
-			   void *user_data);
+						   caniot_controller_event_cb_t cb,
+						   void *user_data);
 
 /**
  * @brief Initialize a controller, provide functions API, cb and user data
@@ -307,9 +307,9 @@ int caniot_controller_init(struct caniot_controller *ctrl,
  * @return int
  */
 int caniot_controller_driv_init(struct caniot_controller *ctrl,
-				const struct caniot_drivers_api *driv,
-				caniot_controller_event_cb_t cb,
-				void *user_data);
+								const struct caniot_drivers_api *driv,
+								caniot_controller_event_cb_t cb,
+								void *user_data);
 
 /**
  * @brief Deinitialize a controller
@@ -349,9 +349,9 @@ uint32_t caniot_controller_next_timeout(const struct caniot_controller *ctrl);
  * @return int handle on success (> 0), negative value on error, 0 if no context allocated
  */
 int caniot_controller_query_register(struct caniot_controller *ctrl,
-				     caniot_did_t did,
-				     struct caniot_frame *frame,
-				     uint32_t timeout);
+									 caniot_did_t did,
+									 struct caniot_frame *frame,
+									 uint32_t timeout);
 
 /**
  * @brief Return true if there is a pending query for the given handle
@@ -373,8 +373,8 @@ bool caniot_controller_query_pending(struct caniot_controller *ctrl, uint8_t han
  * @return int 0 on success, negative value on error
  */
 int caniot_controller_query_cancel(struct caniot_controller *ctrl,
-				   uint8_t handle,
-				   bool suppress);
+								   uint8_t handle,
+								   bool suppress);
 
 /**
  * @brief Process a single frame received from the CAN bus
@@ -385,8 +385,8 @@ int caniot_controller_query_cancel(struct caniot_controller *ctrl,
  * @return int
  */
 int caniot_controller_rx_frame(struct caniot_controller *ctrl,
-			       uint32_t time_passed_ms,
-			       const struct caniot_frame *frame);
+							   uint32_t time_passed_ms,
+							   const struct caniot_frame *frame);
 
 /*____________________________________________________________________________*/
 
@@ -399,8 +399,8 @@ int caniot_controller_rx_frame(struct caniot_controller *ctrl,
  * @return int
  */
 int caniot_controller_query_user_data_set(struct caniot_controller *ctrl,
-					  uint8_t handle,
-					  void *user_data);
+										  uint8_t handle,
+										  void *user_data);
 
 /**
  * @brief Get the user data for the given query handle
@@ -410,7 +410,7 @@ int caniot_controller_query_user_data_set(struct caniot_controller *ctrl,
  * @return void* Pointer to the user data
  */
 void *caniot_controller_query_user_data_get(struct caniot_controller *ctrl,
-					    uint8_t handle);
+											uint8_t handle);
 
 /*____________________________________________________________________________*/
 
@@ -427,9 +427,9 @@ void *caniot_controller_query_user_data_get(struct caniot_controller *ctrl,
  * @return int Handle of the query, 0 if not tracked, negative value on error
  */
 int caniot_controller_query(struct caniot_controller *ctrl,
-			    caniot_did_t did,
-			    struct caniot_frame *frame,
-			    uint32_t timeout);
+							caniot_did_t did,
+							struct caniot_frame *frame,
+							uint32_t timeout);
 
 /**
  * @brief Send a query without tracking it.
@@ -442,8 +442,8 @@ int caniot_controller_query(struct caniot_controller *ctrl,
  * @return int
  */
 int caniot_controller_send(struct caniot_controller *ctrl,
-			   caniot_did_t did,
-			   struct caniot_frame *frame);
+						   caniot_did_t did,
+						   struct caniot_frame *frame);
 
 /**
  *
@@ -470,7 +470,7 @@ int caniot_controller_process(struct caniot_controller *ctrl);
  * @return int
  */
 int caniot_controller_discovery_start(struct caniot_controller *ctrl,
-				      const struct caniot_discovery_params *params);
+									  const struct caniot_discovery_params *params);
 
 /**
  * @brief Stop a discovery
@@ -506,7 +506,7 @@ int caniot_controller_dbg_free_pendq(struct caniot_controller *ctrl);
  * @param user_data
  */
 bool caniot_controller_dbg_event_cb_stub(const caniot_controller_event_t *ev,
-					 void *user_data);
+										 void *user_data);
 
 const char *caniot_controller_event_context_to_str(caniot_controller_event_context_t ctx);
 
diff --git a/include/caniot/datatype.h b/include/caniot/datatype.h
index 22733f1..0eb0314 100644
--- a/include/caniot/datatype.h
+++ b/include/caniot/datatype.h
@@ -69,20 +69,20 @@ typedef enum {
 } caniot_complex_digital_cmd_t;
 
 typedef enum {
-	CANIOT_HEATER_NONE	       = 0,
-	CANIOT_HEATER_COMFORT	       = 1,
-	CANIOT_HEATER_COMFORT_MIN_1    = 2,
-	CANIOT_HEATER_COMFORT_MIN_2    = 3,
-	CANIOT_HEATER_ENERGY_SAVING    = 4,
+	CANIOT_HEATER_NONE			   = 0,
+	CANIOT_HEATER_COMFORT		   = 1,
+	CANIOT_HEATER_COMFORT_MIN_1	   = 2,
+	CANIOT_HEATER_COMFORT_MIN_2	   = 3,
+	CANIOT_HEATER_ENERGY_SAVING	   = 4,
 	CANIOT_HEATER_FROST_PROTECTION = 5,
-	CANIOT_HEATER_STOP	       = 6
+	CANIOT_HEATER_STOP			   = 6
 	// 7 is reserved for future use
 } caniot_heating_mode_t;
 
-#define CANIOT_BLC_SYS_RESET_MASK	    0x1u
-#define CANIOT_BLC_SYS_SOFT_RESET_MASK	    0x2u
-#define CANIOT_BLC_SYS_WATCHDOG_RESET_MASK  0x4u
-#define CANIOT_BLC_SYS_WATCHDOG_MASK	    0x18u
+#define CANIOT_BLC_SYS_RESET_MASK			0x1u
+#define CANIOT_BLC_SYS_SOFT_RESET_MASK		0x2u
+#define CANIOT_BLC_SYS_WATCHDOG_RESET_MASK	0x4u
+#define CANIOT_BLC_SYS_WATCHDOG_MASK		0x18u
 #define CANIOT_BLC_SYS_WATCHDOG_ENABLE_MASK 0x10u
 
 struct caniot_blc_sys_command {
@@ -115,13 +115,13 @@ struct caniot_heating_control {
 	caniot_heating_mode_t heater3_cmd : 4u;
 	caniot_heating_mode_t heater4_cmd : 4u;
 	uint8_t power_status : 1u; /* Tells whether power is detected or not, telemetry
-				      only */
+								  only */
 };
 
-#define CANIOT_SHUTTER_CMD_NONE	       0xFFu
+#define CANIOT_SHUTTER_CMD_NONE		   0xFFu
 #define CANIOT_SHUTTER_CMD_OPENNES(_o) (_o)
-#define CANIOT_SHUTTER_CMD_OPEN	       (100u)
-#define CANIOT_SHUTTER_CMD_CLOSE       (0u)
+#define CANIOT_SHUTTER_CMD_OPEN		   (100u)
+#define CANIOT_SHUTTER_CMD_CLOSE	   (0u)
 
 struct caniot_shutters_control {
 	uint8_t shutters_openness[4u];
diff --git a/include/caniot/device.h b/include/caniot/device.h
index 052f4e2..f6072e7 100644
--- a/include/caniot/device.h
+++ b/include/caniot/device.h
@@ -15,7 +15,7 @@
 extern "C" {
 #endif
 
-// Device identification
+// Device identification (83B)
 struct caniot_device_id {
 	/* Device ID (6 bits) defined has (Class << 3) | SID */
 	caniot_did_t did;
@@ -42,10 +42,11 @@ struct caniot_device_id {
 	uint32_t features[4u];
 } __PACKED;
 
+// 74B
 struct caniot_device_system {
 	uint32_t uptime_synced;	 /* s - uptime when time was last synced */
-	uint32_t time;		 /* s - current time in seconds since epoch */
-	uint32_t uptime;	 /* s - uptime in seconds */
+	uint32_t time;			 /* s - current time in seconds since epoch */
+	uint32_t uptime;		 /* s - uptime in seconds */
 	uint32_t start_time;	 /* s - start time in seconds since epoch */
 	uint32_t last_telemetry; /* s - last telemetry time in seconds since epoch */
 
@@ -63,18 +64,23 @@ struct caniot_device_system {
 		uint32_t request_telemetry;
 		uint32_t ignored; /* frame doesn't target current device */
 	} received;
+
 	uint32_t _unused3;
+	
 	struct {
 		uint32_t total;
 		uint32_t telemetry;
 	} sent;
+
 	uint32_t _unused4;
+	
 	int16_t last_command_error;
 	int16_t last_telemetry_error;
 	int16_t _unused5;
 	uint8_t battery;
 } __PACKED;
 
+// 24B
 struct caniot_class0_config {
 	/* Duration in seconds of the pulse for OC1, OC2, RL1, RL2
 	 * respectively. */
@@ -87,6 +93,7 @@ struct caniot_class0_config {
 	uint32_t telemetry_on_change;
 } __PACKED;
 
+// 92B
 struct caniot_class1_config {
 	/* Duration in seconds of the pulse for all outputs. */
 	uint32_t pulse_durations[19u];
@@ -104,12 +111,13 @@ struct caniot_class1_config {
 	uint32_t telemetry_on_change;
 } __PACKED;
 
+// 17 + CLS
 struct caniot_device_config {
 	struct {
 		uint32_t period; /* period in milliseconds */
 		union {
 			uint16_t delay_min; /* minimum in milliseconds */
-			uint16_t delay;	    /* delay in milliseconds */
+			uint16_t delay;		/* delay in milliseconds */
 		};
 		uint16_t delay_max; /* maximum in milliseconds */
 	} telemetry;
@@ -142,42 +150,41 @@ struct caniot_device_config {
 } __PACKED;
 
 struct caniot_device {
-	const struct caniot_device_id *identification;
-	struct caniot_device_system system;
-	struct caniot_device_config *config;
+	const struct caniot_device_id *identification; // 4B
+	struct caniot_device_system system; // 74B
+	struct caniot_device_config *config; // 109B
 
-	const struct caniot_device_api *api;
+	const struct caniot_device_api *api; // 4B
 
 #if CONFIG_CANIOT_DEVICE_DRIVERS_API
-	const struct caniot_drivers_api *driv;
+	const struct caniot_drivers_api *driv; // 4B
 #endif
 
+	// 1B
 	struct {
 		uint8_t request_telemetry_ep : 4u; /* Bitmask represent what endpoint(s)
-						      to send telemetry for */
-		uint8_t initialized : 1u;	   /* Device is initialized */
+											  to send telemetry for */
+		uint8_t initialized : 1u;		   /* Device is initialized */
 	} flags;
 };
 
 typedef int(caniot_telemetry_handler_t)(struct caniot_device *dev,
-					caniot_endpoint_t ep,
-					unsigned char *buf,
-					uint8_t *len);
+										caniot_endpoint_t ep,
+										unsigned char *buf,
+										uint8_t *len);
 
 typedef int(caniot_command_handler_t)(struct caniot_device *dev,
-				      caniot_endpoint_t ep,
-				      const unsigned char *buf,
-				      uint8_t len);
+									  caniot_endpoint_t ep,
+									  const unsigned char *buf,
+									  uint8_t len);
 
 struct caniot_device_api {
 	struct {
 		/* called before configuration will be read */
-		int (*on_read)(struct caniot_device *dev,
-			       struct caniot_device_config *config);
+		int (*on_read)(struct caniot_device *dev, struct caniot_device_config *config);
 
 		/* called after configuration is updated */
-		int (*on_write)(struct caniot_device *dev,
-				struct caniot_device_config *config);
+		int (*on_write)(struct caniot_device *dev, struct caniot_device_config *config);
 	} config;
 
 	struct {
@@ -197,8 +204,8 @@ void caniot_print_device_identification(const struct caniot_device *dev);
 int caniot_device_system_reset(struct caniot_device *dev);
 
 int caniot_device_handle_rx_frame(struct caniot_device *dev,
-				  const struct caniot_frame *req,
-				  struct caniot_frame *resp);
+								  const struct caniot_frame *req,
+								  struct caniot_frame *resp);
 
 caniot_did_t caniot_device_get_id(struct caniot_device *dev);
 
@@ -234,10 +241,10 @@ static inline uint16_t _si_caniot_device_get_filter_broadcast(caniot_did_t did)
 {
 	(void)did;
 	return CANIOT_ID(0U,
-			 CANIOT_QUERY,
-			 CANIOT_DID_CLS(CANIOT_DID_BROADCAST),
-			 CANIOT_DID_SID(CANIOT_DID_BROADCAST),
-			 0U);
+					 CANIOT_QUERY,
+					 CANIOT_DID_CLS(CANIOT_DID_BROADCAST),
+					 CANIOT_DID_SID(CANIOT_DID_BROADCAST),
+					 0U);
 }
 
 /**
@@ -275,7 +282,7 @@ void caniot_device_trigger_telemetry_ep(struct caniot_device *dev, caniot_endpoi
 void caniot_device_trigger_periodic_telemetry(struct caniot_device *dev);
 
 bool caniot_device_triggered_telemetry_ep(struct caniot_device *dev,
-					  caniot_endpoint_t ep);
+										  caniot_endpoint_t ep);
 
 bool caniot_device_triggered_telemetry_any(struct caniot_device *dev);
 
@@ -294,41 +301,41 @@ int caniot_device_verify(struct caniot_device *dev);
 #define CANIOT_ATTR_KEY(section, attr, part)                                             \
 	((section & 0xF) << 12 | (attr & 0xFF) << 4 | (part & 0xF))
 
-#define CANIOT_ATTR_KEY_ID_NODEID	CANIOT_ATTR_KEY(0, 0x0, 0) // 0x0000
-#define CANIOT_ATTR_KEY_ID_VERSION	CANIOT_ATTR_KEY(0, 0x1, 0) // 0x0010
-#define CANIOT_ATTR_KEY_ID_NAME		CANIOT_ATTR_KEY(0, 0x2, 0) // 0x0020
+#define CANIOT_ATTR_KEY_ID_NODEID		CANIOT_ATTR_KEY(0, 0x0, 0) // 0x0000
+#define CANIOT_ATTR_KEY_ID_VERSION		CANIOT_ATTR_KEY(0, 0x1, 0) // 0x0010
+#define CANIOT_ATTR_KEY_ID_NAME			CANIOT_ATTR_KEY(0, 0x2, 0) // 0x0020
 #define CANIOT_ATTR_KEY_ID_MAGIC_NUMBER CANIOT_ATTR_KEY(0, 0x3, 0) // 0x0030
 #define CANIOT_ATTR_KEY_ID_BUILD_DATE	CANIOT_ATTR_KEY(0, 0x4, 0) // 0x0040
 #define CANIOT_ATTR_KEY_ID_BUILD_COMMIT CANIOT_ATTR_KEY(0, 0x5, 0) // 0x0050
-#define CANIOT_ATTR_KEY_ID_FEATURES	CANIOT_ATTR_KEY(0, 0x6, 0) // 0x0060
+#define CANIOT_ATTR_KEY_ID_FEATURES		CANIOT_ATTR_KEY(0, 0x6, 0) // 0x0060
 
-#define CANIOT_ATTR_KEY_SYSTEM_UPTIME_SYNCED	      CANIOT_ATTR_KEY(1, 0x0, 0) // 0x1000
-#define CANIOT_ATTR_KEY_SYSTEM_TIME		      CANIOT_ATTR_KEY(1, 0x1, 0) // 0x1010
-#define CANIOT_ATTR_KEY_SYSTEM_UPTIME		      CANIOT_ATTR_KEY(1, 0x2, 0) // 0x1020
-#define CANIOT_ATTR_KEY_SYSTEM_START_TIME	      CANIOT_ATTR_KEY(1, 0x3, 0) // 0x1030
-#define CANIOT_ATTR_KEY_SYSTEM_LAST_TELEMETRY	      CANIOT_ATTR_KEY(1, 0x4, 0) // 0x1040
+#define CANIOT_ATTR_KEY_SYSTEM_UPTIME_SYNCED		  CANIOT_ATTR_KEY(1, 0x0, 0) // 0x1000
+#define CANIOT_ATTR_KEY_SYSTEM_TIME					  CANIOT_ATTR_KEY(1, 0x1, 0) // 0x1010
+#define CANIOT_ATTR_KEY_SYSTEM_UPTIME				  CANIOT_ATTR_KEY(1, 0x2, 0) // 0x1020
+#define CANIOT_ATTR_KEY_SYSTEM_START_TIME			  CANIOT_ATTR_KEY(1, 0x3, 0) // 0x1030
+#define CANIOT_ATTR_KEY_SYSTEM_LAST_TELEMETRY		  CANIOT_ATTR_KEY(1, 0x4, 0) // 0x1040
 #define CANIOT_ATTR_KEY_SYSTEM_LAST_TELEMETRY_MS_MOD  CANIOT_ATTR_KEY(1, 0xB, 0) // 0x10B0
-#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_TOTAL	      CANIOT_ATTR_KEY(1, 0x5, 0) // 0x1050
-#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_READ_ATTR     CANIOT_ATTR_KEY(1, 0x6, 0) // 0x1060
-#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_WRITE_ATTR    CANIOT_ATTR_KEY(1, 0x7, 0) // 0x1070
-#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_COMMAND	      CANIOT_ATTR_KEY(1, 0x8, 0) // 0x1080
+#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_TOTAL		  CANIOT_ATTR_KEY(1, 0x5, 0) // 0x1050
+#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_READ_ATTR	  CANIOT_ATTR_KEY(1, 0x6, 0) // 0x1060
+#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_WRITE_ATTR	  CANIOT_ATTR_KEY(1, 0x7, 0) // 0x1070
+#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_COMMAND		  CANIOT_ATTR_KEY(1, 0x8, 0) // 0x1080
 #define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_REQ_TELEMETRY CANIOT_ATTR_KEY(1, 0x9, 0) // 0x1090
-#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_IGNORED	      CANIOT_ATTR_KEY(1, 0xA, 0) // 0x10A0
-#define CANIOT_ATTR_KEY_SYSTEM_SENT_TOTAL	      CANIOT_ATTR_KEY(1, 0xC, 0) // 0x10C0
-#define CANIOT_ATTR_KEY_SYSTEM_SENT_TELEMETRY	      CANIOT_ATTR_KEY(1, 0xD, 0) // 0x10D0
-#define CANIOT_ATTR_KEY_SYSTEM_UNUSED4		      CANIOT_ATTR_KEY(1, 0xE, 0) // 0x10E0
-#define CANIOT_ATTR_KEY_SYSTEM_LAST_COMMAND_ERROR     CANIOT_ATTR_KEY(1, 0xF, 0) // 0x10F0
-#define CANIOT_ATTR_KEY_SYSTEM_LAST_TELEMETRY_ERROR   CANIOT_ATTR_KEY(1, 0x10, 0) // 0x1100
-#define CANIOT_ATTR_KEY_SYSTEM_UNUSED5		      CANIOT_ATTR_KEY(1, 0x11, 0) // 0x1110
-#define CANIOT_ATTR_KEY_SYSTEM_BATTERY		      CANIOT_ATTR_KEY(1, 0x12, 0) // 0x1120
+#define CANIOT_ATTR_KEY_SYSTEM_RECEIVED_IGNORED		  CANIOT_ATTR_KEY(1, 0xA, 0) // 0x10A0
+#define CANIOT_ATTR_KEY_SYSTEM_SENT_TOTAL			  CANIOT_ATTR_KEY(1, 0xC, 0) // 0x10C0
+#define CANIOT_ATTR_KEY_SYSTEM_SENT_TELEMETRY		  CANIOT_ATTR_KEY(1, 0xD, 0) // 0x10D0
+#define CANIOT_ATTR_KEY_SYSTEM_UNUSED4				  CANIOT_ATTR_KEY(1, 0xE, 0) // 0x10E0
+#define CANIOT_ATTR_KEY_SYSTEM_LAST_COMMAND_ERROR	  CANIOT_ATTR_KEY(1, 0xF, 0) // 0x10F0
+#define CANIOT_ATTR_KEY_SYSTEM_LAST_TELEMETRY_ERROR	  CANIOT_ATTR_KEY(1, 0x10, 0) // 0x1100
+#define CANIOT_ATTR_KEY_SYSTEM_UNUSED5				  CANIOT_ATTR_KEY(1, 0x11, 0) // 0x1110
+#define CANIOT_ATTR_KEY_SYSTEM_BATTERY				  CANIOT_ATTR_KEY(1, 0x12, 0) // 0x1120
 
 #define CANIOT_ATTR_KEY_CONFIG_TELEMETRY_PERIOD	   CANIOT_ATTR_KEY(2, 0x0, 0) // 0x2000
 #define CANIOT_ATTR_KEY_CONFIG_TELEMETRY_DELAY	   CANIOT_ATTR_KEY(2, 0x1, 0) // 0x2010
 #define CANIOT_ATTR_KEY_CONFIG_TELEMETRY_DELAY_MIN CANIOT_ATTR_KEY(2, 0x2, 0) // 0x2020
 #define CANIOT_ATTR_KEY_CONFIG_TELEMETRY_DELAY_MAX CANIOT_ATTR_KEY(2, 0x3, 0) // 0x2030
-#define CANIOT_ATTR_KEY_CONFIG_FLAGS		   CANIOT_ATTR_KEY(2, 0x4, 0) // 0x2040
-#define CANIOT_ATTR_KEY_CONFIG_TIMEZONE		   CANIOT_ATTR_KEY(2, 0x5, 0) // 0x2050
-#define CANIOT_ATTR_KEY_CONFIG_LOCATION		   CANIOT_ATTR_KEY(2, 0x6, 0) // 0x2060
+#define CANIOT_ATTR_KEY_CONFIG_FLAGS			   CANIOT_ATTR_KEY(2, 0x4, 0) // 0x2040
+#define CANIOT_ATTR_KEY_CONFIG_TIMEZONE			   CANIOT_ATTR_KEY(2, 0x5, 0) // 0x2050
+#define CANIOT_ATTR_KEY_CONFIG_LOCATION			   CANIOT_ATTR_KEY(2, 0x6, 0) // 0x2060
 #define CANIOT_ATTR_KEY_CONFIG_CLS0_GPIO_PULSE_DURATION_OC1                              \
 	CANIOT_ATTR_KEY(2, 0x7, 0) // 0x2070
 #define CANIOT_ATTR_KEY_CONFIG_CLS0_GPIO_PULSE_DURATION_OC2                              \
@@ -380,7 +387,7 @@ int caniot_device_verify(struct caniot_device *dev);
 #define CANIOT_ATTR_KEY_CONFIG_CLS1_GPIO_PULSE_DURATION_PE1                              \
 	CANIOT_ATTR_KEY(2, 0x1F, 0) // 0x21F0
 #define CANIOT_ATTR_KEY_CONFIG_CLS1_GPIO_PULSE_DURATION_RESERVED                         \
-	CANIOT_ATTR_KEY(2, 0x20, 0)						// 0x2200
+	CANIOT_ATTR_KEY(2, 0x20, 0)													// 0x2200
 #define CANIOT_ATTR_KEY_CONFIG_CLS1_GPIO_DIRECTIONS CANIOT_ATTR_KEY(2, 0x21, 0) // 0x2210
 #define CANIOT_ATTR_KEY_CONFIG_CLS1_GPIO_OUTPUTS_DEFAULT                                 \
 	CANIOT_ATTR_KEY(2, 0x22, 0) // 0x2220
@@ -389,8 +396,8 @@ int caniot_device_verify(struct caniot_device *dev);
 
 enum caniot_device_section {
 	CANIOT_SECTION_DEVICE_IDENTIFICATION = 0,
-	CANIOT_SECTION_DEVICE_SYSTEM	     = 1,
-	CANIOT_SECTION_DEVICE_CONFIG	     = 2
+	CANIOT_SECTION_DEVICE_SYSTEM		 = 1,
+	CANIOT_SECTION_DEVICE_CONFIG		 = 2
 };
 
 struct caniot_device_attribute {
@@ -424,7 +431,7 @@ int caniot_attr_get_by_name(struct caniot_device_attribute *attr, const char *na
  * @note return false to stop iteration
  */
 typedef bool(caniot_device_attribute_handler_t)(struct caniot_device_attribute *attr,
-						void *user_data);
+												void *user_data);
 
 /**
  * @brief Iterate over all existing attributes, call handler for each
@@ -437,53 +444,53 @@ int caniot_attr_iterate(caniot_device_attribute_handler_t *handler, void *user_d
 
 /*____________________________________________________________________________*/
 
-#define CANIOT_CONFIG_DEFAULT_INIT()                                                      \
-	{                                                                                 \
-		.telemetry =                                                              \
-			{                                                                 \
-				.period	   = CANIOT_TELEMETRY_PERIOD_DEFAULT_MS,          \
-				.delay_min = CANIOT_TELEMETRY_DELAY_MIN_DEFAULT_MS,       \
-				.delay_max = CANIOT_TELEMETRY_DELAY_MAX_DEFAULT_MS,       \
-			},                                                                \
-		.flags =                                                                  \
-			{                                                                 \
-				.error_response	     = 1u,                                \
-				.telemetry_delay_rdm = 1u,                                \
-				.telemetry_endpoint  = CANIOT_TELEMETRY_ENDPOINT_DEFAULT, \
-				.telemetry_periodic_enabled = 1u,                         \
-			},                                                                \
-		.timezone = CANIOT_TIMEZONE_DEFAULT,                                      \
-		.location =                                                               \
-			{                                                                 \
-				.region	 = CANIOT_LOCATION_REGION_DEFAULT,                \
-				.country = CANIOT_LOCATION_COUNTRY_DEFAULT,               \
-			},                                                                \
-		.cls0_gpio = {                                                            \
-			.pulse_durations =                                                \
-				{                                                         \
-					[0] = 0u,                                         \
-					[1] = 0u,                                         \
-					[2] = 0u,                                         \
-					[3] = 0u,                                         \
-				},                                                        \
-			.outputs_default     = 0u,                                        \
-			.telemetry_on_change = 0xFFFFFFFFlu,                              \
-		},                                                                        \
+#define CANIOT_CONFIG_DEFAULT_INIT()                                                     \
+	{                                                                                    \
+		.telemetry =                                                                     \
+			{                                                                            \
+				.period	   = CANIOT_TELEMETRY_PERIOD_DEFAULT_MS,                         \
+				.delay_min = CANIOT_TELEMETRY_DELAY_MIN_DEFAULT_MS,                      \
+				.delay_max = CANIOT_TELEMETRY_DELAY_MAX_DEFAULT_MS,                      \
+			},                                                                           \
+		.flags =                                                                         \
+			{                                                                            \
+				.error_response				= 1u,                                        \
+				.telemetry_delay_rdm		= 1u,                                        \
+				.telemetry_endpoint			= CANIOT_TELEMETRY_ENDPOINT_DEFAULT,         \
+				.telemetry_periodic_enabled = 1u,                                        \
+			},                                                                           \
+		.timezone = CANIOT_TIMEZONE_DEFAULT,                                             \
+		.location =                                                                      \
+			{                                                                            \
+				.region	 = CANIOT_LOCATION_REGION_DEFAULT,                               \
+				.country = CANIOT_LOCATION_COUNTRY_DEFAULT,                              \
+			},                                                                           \
+		.cls0_gpio = {                                                                   \
+			.pulse_durations =                                                           \
+				{                                                                        \
+					[0] = 0u,                                                            \
+					[1] = 0u,                                                            \
+					[2] = 0u,                                                            \
+					[3] = 0u,                                                            \
+				},                                                                       \
+			.outputs_default	 = 0u,                                                   \
+			.telemetry_on_change = 0xFFFFFFFFlu,                                         \
+		},                                                                               \
 	}
 
 #define CANIOT_DEVICE_API_FULL_INIT(cmd, tlm, cfgr, cfgw, attr, attw)                    \
-	{                                                                                \
-		.config =                                                                \
-			{                                                                \
-				.on_read  = cfgr,                                        \
-				.on_write = cfgw,                                        \
-			},                                                               \
-		.custom_attr =                                                           \
-			{                                                                \
-				.read  = attr,                                           \
-				.write = attw,                                           \
-			},                                                               \
-		.command_handler = cmd, .telemetry_handler = tlm,                        \
+	{                                                                                    \
+		.config =                                                                        \
+			{                                                                            \
+				.on_read  = cfgr,                                                        \
+				.on_write = cfgw,                                                        \
+			},                                                                           \
+		.custom_attr =                                                                   \
+			{                                                                            \
+				.read  = attr,                                                           \
+				.write = attw,                                                           \
+			},                                                                           \
+		.command_handler = cmd, .telemetry_handler = tlm,                                \
 	}
 
 #define CANIOT_DEVICE_API_STD_INIT(cmd, tlm, cfgr, cfgw)                                 \
diff --git a/include/caniot/errors.h b/include/caniot/errors.h
index c4179ba..425d191 100644
--- a/include/caniot/errors.h
+++ b/include/caniot/errors.h
@@ -10,25 +10,25 @@
 #include <stdbool.h>
 #include <stdint.h>
 
-#define CANIOT_ERROR_BASE	 0x3A00U
-#define CANIOT_ERROR_MAX	 0x3AFFU
+#define CANIOT_ERROR_BASE		 0x3A00U
+#define CANIOT_ERROR_MAX		 0x3AFFU
 #define CANIOT_ERROR_DEVICE_MASK 0x0080U
 
 typedef enum {
-	CANIOT_OK     = 0x0000,
+	CANIOT_OK	  = 0x0000,
 	CANIOT_EINVAL = CANIOT_ERROR_BASE, /* Invalid argument */
-	CANIOT_ENPROC,			   /*  UNPROCESSABLE */
-	CANIOT_ECMD,			   /*  COMMAND */
-	CANIOT_EKEY,			   /*  KEY (read/write-attribute) */
-	CANIOT_ETIMEOUT,		   /*  TIMEOUT */
-	CANIOT_EAGAIN,			   /*  BUSY / EAGAIN */
-	CANIOT_EFMT,			   /*  FORMAT */
-	CANIOT_EHANDLERC,		   /*  UNDEFINED COMMAND HANDLER  */
-	CANIOT_EHANDLERT,		   /*  UNDEFINED TELEMETRY HANDLER */
-	CANIOT_ETELEMETRY,		   /*  TELEMETRY */
-	CANIOT_EUNEXPECTED,		   /*  Unexpected frame */
-
-	CANIOT_EEP,    /*  ENDPOINT */
+	CANIOT_ENPROC,					   /*  UNPROCESSABLE */
+	CANIOT_ECMD,					   /*  COMMAND */
+	CANIOT_EKEY,					   /*  KEY (read/write-attribute) */
+	CANIOT_ETIMEOUT,				   /*  TIMEOUT */
+	CANIOT_EAGAIN,					   /*  BUSY / EAGAIN */
+	CANIOT_EFMT,					   /*  FORMAT */
+	CANIOT_EHANDLERC,				   /*  UNDEFINED COMMAND HANDLER  */
+	CANIOT_EHANDLERT,				   /*  UNDEFINED TELEMETRY HANDLER */
+	CANIOT_ETELEMETRY,				   /*  TELEMETRY */
+	CANIOT_EUNEXPECTED,				   /*  Unexpected frame */
+
+	CANIOT_EEP,	   /*  ENDPOINT */
 	CANIOT_ECMDEP, /*  ILLEGAL COMMAND, BROADCAST TO ALL ENDPOINTS */
 
 	CANIOT_ENOINIT, /*  NOT INITIALIZED */
@@ -36,10 +36,10 @@ typedef enum {
 	CANIOT_EAPI,	/*  API */
 
 	CANIOT_EKEYSECTION, /* Unknown attributes section */
-	CANIOT_EKEYATTR,    /* Unknown attribute */
-	CANIOT_EKEYPART,    /* Unknown attribute part */
-	CANIOT_ENOATTR,	    /* No attribute */
-	CANIOT_ECLSATTR,    /* Class attribute not accessible for current device */
+	CANIOT_EKEYATTR,	/* Unknown attribute */
+	CANIOT_EKEYPART,	/* Unknown attribute part */
+	CANIOT_ENOATTR,		/* No attribute */
+	CANIOT_ECLSATTR,	/* Class attribute not accessible for current device */
 
 	CANIOT_EREADONLY,
 
diff --git a/readme.md b/readme.md
index 880c71c..e6de572 100644
--- a/readme.md
+++ b/readme.md
@@ -2,4 +2,10 @@
 
 This library provides a simple interface to the CANIoT protocol. 
 It is designed to be used with the [caniot-device](https://github.com/lucasdietrich/caniot-device) and 
-[zephyr-caniot-controller](https://github.com/lucasdietrich/zephyr-caniot-controller).
\ No newline at end of file
+[zephyr-caniot-controller](https://github.com/lucasdietrich/zephyr-caniot-controller).
+
+AVRTOS:
+- Create function:
+  - CLZ: count leading zeros (`sys_clz`)
+  - CTZ: count trailing zeros (`sys_ctz`)
+- Split `caniot_frame_type_t` into two types (like for rust).
\ No newline at end of file
diff --git a/samples/attributes/attr.c b/samples/attributes/attr.c
index 20db869..7d52a09 100644
--- a/samples/attributes/attr.c
+++ b/samples/attributes/attr.c
@@ -16,12 +16,12 @@ bool attr_handler(struct caniot_device_attribute *attr, void *user_data)
 	(void)user_data;
 
 	printf("key: %04hx section: %u name: %s [%s%s%s]\n",
-	       attr->key,
-	       attr->section,
-	       attr->name,
-	       attr->read ? "R" : "-",
-	       attr->write ? "W" : "-",
-	       attr->persistent ? "P" : "-");
+		   attr->key,
+		   attr->section,
+		   attr->name,
+		   attr->read ? "R" : "-",
+		   attr->write ? "W" : "-",
+		   attr->persistent ? "P" : "-");
 
 	return true;
 }
diff --git a/samples/sim/canbus.c b/samples/sim/canbus.c
index a03ad1c..908d55d 100644
--- a/samples/sim/canbus.c
+++ b/samples/sim/canbus.c
@@ -80,7 +80,7 @@ int can_recv(struct caniot_frame *frame)
 		// dequeue if not null
 		if (queue.head != NULL) {
 			struct item *item = queue.head;
-			queue.head	  = queue.head->next;
+			queue.head		  = queue.head->next;
 
 			if (queue.head == NULL) {
 				queue.tail = NULL;
diff --git a/samples/sim/controllers.c b/samples/sim/controllers.c
index 176b389..51f5dee 100644
--- a/samples/sim/controllers.c
+++ b/samples/sim/controllers.c
@@ -19,7 +19,7 @@ struct caniot_controller controllers[CONTROLLERS_COUNT];
 /*
 static int can_send_fail(const struct caniot_frame *frame, uint32_t delay_ms)
 {
-	return -1;
+		return -1;
 }
 */
 
@@ -38,12 +38,12 @@ bool ctrl_event_cb(const caniot_controller_event_t *ev, void *user_data)
 	(void)user_data;
 
 	printf("[CTRL EV] did=%u handle=%u ctx=%u status=%u term=%u resp=%p\n",
-	       ev->did,
-	       ev->handle,
-	       ev->context,
-	       ev->status,
-	       ev->terminated,
-	       (void *)ev->response);
+		   ev->did,
+		   ev->handle,
+		   ev->context,
+		   ev->status,
+		   ev->terminated,
+		   (void *)ev->response);
 
 	vtime_inc_const();
 
@@ -53,11 +53,11 @@ bool ctrl_event_cb(const caniot_controller_event_t *ev, void *user_data)
 
 	/*
 	if (ev->status == CANIOT_CONTROLLER_EVENT_STATUS_OK) {
-		if (counter++ > 10) {
-			goto exit;
-		}
-		ctrl_Q(0U, CANIOT_DID(ev->response->id.cls, ev->response->id.sid),
-		       &qtelemetry, 350U);
+			if (counter++ > 10) {
+					goto exit;
+			}
+			ctrl_Q(0U, CANIOT_DID(ev->response->id.cls, ev->response->id.sid),
+				   &qtelemetry, 350U);
 	}
 exit:
 	*/
@@ -84,9 +84,9 @@ void controllers_process(const struct caniot_frame *frame, uint32_t time_passed_
 }
 
 int ctrl_Q(uint32_t ctrlid,
-	   caniot_did_t did,
-	   struct caniot_frame *frame,
-	   uint32_t timeout)
+		   caniot_did_t did,
+		   struct caniot_frame *frame,
+		   uint32_t timeout)
 {
 	int ret = -EINVAL;
 
@@ -109,9 +109,9 @@ int ctrl_C(uint32_t ctrlid, uint8_t handle, bool suppress)
 static struct caniot_discovery_params params;
 
 bool discovery_cb(struct caniot_controller *ctrl,
-		  caniot_did_t did,
-		  const struct caniot_frame *frame,
-		  void *user_data)
+				  caniot_did_t did,
+				  const struct caniot_frame *frame,
+				  void *user_data)
 {
 	(void)ctrl;
 	(void)user_data;
@@ -127,14 +127,14 @@ void controllers_discovery_start(void)
 {
 	int ret;
 
-	params.mode	     = CANIOT_DISCOVERY_MODE_ACTIVE;
-	params.type	     = CANIOT_DISCOVERY_TYPE_TELEMETRY;
+	params.mode			 = CANIOT_DISCOVERY_MODE_ACTIVE;
+	params.type			 = CANIOT_DISCOVERY_TYPE_TELEMETRY;
 	params.data.endpoint = CANIOT_ENDPOINT_BOARD_CONTROL;
 
 	params.timeout = 2000u;
 
 	params.user_callback = discovery_cb;
-	params.user_data     = NULL;
+	params.user_data	 = NULL;
 
 	ret = caniot_controller_discovery_start(
 		&controllers[0u], (const struct caniot_discovery_params *)&params);
diff --git a/samples/sim/devices.c b/samples/sim/devices.c
index f404300..b028ebe 100644
--- a/samples/sim/devices.c
+++ b/samples/sim/devices.c
@@ -10,20 +10,22 @@
 #include <caniot/caniot_private.h>
 #include <caniot/device.h>
 
-struct caniot_device_id ids[DEVICES_COUNT];
+#if DEVICES_COUNT > 63
+#error "DEVICES_COUNT must be less than 64"
+#endif
 
-struct caniot_device_config cfgs[DEVICES_COUNT];
+static struct caniot_device_id ids[DEVICES_COUNT] = {0};
+
+static struct caniot_device_config cfgs[DEVICES_COUNT] = {0};
 
 const struct caniot_device_config default_cfg = CANIOT_CONFIG_DEFAULT_INIT();
 
 struct caniot_device devices[DEVICES_COUNT];
 
 static int cb_config_on_read(struct caniot_device *dev,
-			     struct caniot_device_config *config)
+							 struct caniot_device_config *config)
 {
-	printf("[DEV CB] cb_config_on_read dev=%p config=%p\n",
-	       (void *)dev,
-	       (void *)config);
+	printf("[DEV CB] cb_config_on_read dev=%p config=%p\n", (void *)dev, (void *)config);
 
 	vtime_inc_const();
 
@@ -31,11 +33,9 @@ static int cb_config_on_read(struct caniot_device *dev,
 }
 
 static int cb_config_on_write(struct caniot_device *dev,
-			      struct caniot_device_config *config)
+							  struct caniot_device_config *config)
 {
-	printf("[DEV CB] cb_config_on_write dev=%p config=%p\n",
-	       (void *)dev,
-	       (void *)config);
+	printf("[DEV CB] cb_config_on_write dev=%p config=%p\n", (void *)dev, (void *)config);
 
 	vtime_inc_const();
 
@@ -46,10 +46,8 @@ static int cb_attr_read(struct caniot_device *dev, uint16_t key, uint32_t *val)
 {
 	*val = 0U;
 
-	printf("[DEV CB] cb_attr_read dev=%p key=%hu *val=%p\n",
-	       (void *)dev,
-	       key,
-	       (void *)val);
+	printf(
+		"[DEV CB] cb_attr_read dev=%p key=%hu *val=%p\n", (void *)dev, key, (void *)val);
 
 	vtime_inc_const();
 
@@ -66,18 +64,16 @@ static int cb_attr_write(struct caniot_device *dev, uint16_t key, uint32_t val)
 }
 
 static int(cb_telemetry_handler)(struct caniot_device *dev,
-				 caniot_endpoint_t ep,
-				 unsigned char *buf,
-				 uint8_t *len)
+								 caniot_endpoint_t ep,
+								 unsigned char *buf,
+								 uint8_t *len)
 {
 	*len = 0U;
 
-	printf("[DEV CB] cb_telemetry_handler dev=%p ep=%hhu buf=%p [&len=%p len=%hhu]\n",
-	       (void *)dev,
-	       ep,
-	       (void *)buf,
-	       (void *)len,
-	       *len);
+	printf("[DEV CB] cb_telemetry_handler dev=%p ep=%hhu [len=%hhu]\n",
+		   (void *)dev,
+		   ep,
+		   *len);
 
 	vtime_inc_const();
 
@@ -85,15 +81,15 @@ static int(cb_telemetry_handler)(struct caniot_device *dev,
 }
 
 static int(cb_command_handler)(struct caniot_device *dev,
-			       caniot_endpoint_t ep,
-			       const unsigned char *buf,
-			       uint8_t len)
+							   caniot_endpoint_t ep,
+							   const unsigned char *buf,
+							   uint8_t len)
 {
 	printf("[DEV CB] cb_command_handler dev=%p ep=%hhu buf=%p [len = %hhu]\n",
-	       (void *)dev,
-	       ep,
-	       (void *)buf,
-	       len);
+		   (void *)dev,
+		   ep,
+		   (void *)buf,
+		   len);
 
 	vtime_inc_const();
 
@@ -101,20 +97,19 @@ static int(cb_command_handler)(struct caniot_device *dev,
 }
 
 const struct caniot_device_api api = CANIOT_DEVICE_API_FULL_INIT(cb_command_handler,
-								 cb_telemetry_handler,
-								 cb_config_on_read,
-								 cb_config_on_write,
-								 cb_attr_read,
-								 cb_attr_write);
+																 cb_telemetry_handler,
+																 cb_config_on_read,
+																 cb_config_on_write,
+																 cb_attr_read,
+																 cb_attr_write);
 
 void init_devices(void)
 {
-	for (size_t i = 0U; i < ARRAY_SIZE(devices); i++) {
+	for (size_t i = 0u; i < DEVICES_COUNT; i++) {
 		struct caniot_device *dev = &devices[i];
 
-		ids[i].did	    = CANIOT_DID(CANIOT_DEVICE_CLASS1, i);
+		ids[i].did			= i;
 		ids[i].magic_number = 2 * i + 1U;
-		ids[i].version	    = 0;
 
 		dev->identification = &ids[i];
 
@@ -135,8 +130,7 @@ void devices_process(const struct caniot_frame *req)
 	caniot_clear_frame(&resp);
 
 	for (size_t i = 0U; i < ARRAY_SIZE(devices); i++) {
-		if (caniot_device_is_target(devices[i].identification->did, req) ==
-		    true) {
+		if (caniot_device_is_target(devices[i].identification->did, req) == true) {
 			caniot_device_handle_rx_frame(&devices[i], req, &resp);
 			// caniot_explain_frame(&resp);
 			// printf("\n");
diff --git a/samples/sim/header.h b/samples/sim/header.h
index 70d475d..3aea509 100644
--- a/samples/sim/header.h
+++ b/samples/sim/header.h
@@ -8,7 +8,7 @@
 #define _HEADER_H
 
 #define CONTROLLERS_COUNT 1U
-#define DEVICES_COUNT	  2u
+#define DEVICES_COUNT	  63u
 
 #define VTIME_INC_CONST_VAL 100U
 
@@ -24,9 +24,9 @@ void controllers_discovery_start(void);
 void controllers_discovery_stop(void);
 
 int ctrl_Q(uint32_t ctrlid,
-	   caniot_did_t did,
-	   struct caniot_frame *frame,
-	   uint32_t timeout);
+		   caniot_did_t did,
+		   struct caniot_frame *frame,
+		   uint32_t timeout);
 int ctrl_C(uint32_t ctrlid, uint8_t handle, bool suppress);
 
 int can_send(const struct caniot_frame *frame, uint32_t delay_ms);
diff --git a/samples/sim/sim.c b/samples/sim/sim.c
index 31cd89c..f525f24 100644
--- a/samples/sim/sim.c
+++ b/samples/sim/sim.c
@@ -70,11 +70,7 @@ struct timed_frame {
 };
 
 struct timed_frame timed_frames[] = {
-	{100u,
-	 0U,
-	 CANIOT_DID(CANIOT_DEVICE_CLASS1, CANIOT_DEVICE_SID0),
-	 1000u,
-	 &qtelemetry},
+	{100u, 0U, CANIOT_DID(CANIOT_DEVICE_CLASS1, CANIOT_DEVICE_SID0), 1000u, &qtelemetry},
 	{100u, 0U, CANIOT_DID_BROADCAST, 1000u, &qtelemetry},
 };
 
@@ -103,8 +99,8 @@ int main(void)
 
 		/* Send schedulded frames */
 		for (struct timed_frame *tf = timed_frames;
-		     tf < timed_frames + ARRAY_SIZE(timed_frames);
-		     tf++) {
+			 tf < timed_frames + ARRAY_SIZE(timed_frames);
+			 tf++) {
 
 			if (now >= tf->time) {
 				ctrl_Q(tf->ctrlid, tf->did, tf->frame, tf->timeout);
@@ -117,7 +113,7 @@ int main(void)
 		FD_ZERO(&readfds);
 		FD_SET(STDIN_FILENO, &readfds);
 		struct timeval timeout = {.tv_sec = 0, .tv_usec = 0};
-		ret = select(STDIN_FILENO + 1, &readfds, NULL, NULL, &timeout);
+		ret					   = select(STDIN_FILENO + 1, &readfds, NULL, NULL, &timeout);
 		if (ret > 0 && read(STDIN_FILENO, &chr, 1u) > 0) {
 			switch (chr) {
 			case 'd':
@@ -136,7 +132,7 @@ int main(void)
 			last_time = now;
 		}
 		const uint64_t delta = now - last_time;
-		last_time	     = now;
+		last_time			 = now;
 
 		/* Process a single frame */
 		ret = can_recv(&frame);
diff --git a/src/caniot.c b/src/caniot.c
index 7058dcc..88d763a 100644
--- a/src/caniot.c
+++ b/src/caniot.c
@@ -142,10 +142,9 @@ void caniot_show_deviceid(caniot_did_t did)
 		CANIOT_INF(F("(%hhd: %s,%s)"), did, cls_str, sid_str);
 #else
 		CANIOT_INF(F("(%hhd: %s,%s)"),
-			   did,
-			   did,
-			   get_class_str(CANIOT_DID_CLS(did)),
-			   get_sid_str(CANIOT_DID_SID(did)));
+				   did,
+				   get_class_str(CANIOT_DID_CLS(did)),
+				   get_sid_str(CANIOT_DID_SID(did)));
 #endif
 	}
 }
@@ -153,17 +152,17 @@ void caniot_show_deviceid(caniot_did_t did)
 void caniot_show_frame(const struct caniot_frame *frame)
 {
 	CANIOT_INF(F("%x [ %02hhx %02hhx %02hhx %02hhx %02hhx %02hhx %02hhx %02hhx ] len "
-		     "= %d"),
-		   caniot_id_to_canid(frame->id),
-		   (uint8_t)frame->buf[0],
-		   (uint8_t)frame->buf[1],
-		   (uint8_t)frame->buf[2],
-		   (uint8_t)frame->buf[3],
-		   (uint8_t)frame->buf[4],
-		   (uint8_t)frame->buf[5],
-		   (uint8_t)frame->buf[6],
-		   (uint8_t)frame->buf[7],
-		   (uint8_t)frame->len);
+				 "= %d"),
+			   caniot_id_to_canid(frame->id),
+			   (uint8_t)frame->buf[0],
+			   (uint8_t)frame->buf[1],
+			   (uint8_t)frame->buf[2],
+			   (uint8_t)frame->buf[3],
+			   (uint8_t)frame->buf[4],
+			   (uint8_t)frame->buf[5],
+			   (uint8_t)frame->buf[6],
+			   (uint8_t)frame->buf[7],
+			   (uint8_t)frame->len);
 }
 
 void caniot_explain_id(caniot_id_t id)
@@ -204,16 +203,16 @@ void caniot_explain_frame(const struct caniot_frame *frame)
 	}
 
 	if ((frame->id.type == CANIOT_FRAME_TYPE_TELEMETRY) ||
-	    (frame->id.type == CANIOT_FRAME_TYPE_COMMAND)) {
+		(frame->id.type == CANIOT_FRAME_TYPE_COMMAND)) {
 		for (int i = 0; i < frame->len; i++) {
 			CANIOT_INF(F("%02hhx "), (uint8_t)frame->buf[i]);
 		}
 	} else {
 		CANIOT_INF(F("len: %d key: x%02x val: x%04x%04x"),
-			   frame->len,
-			   frame->attr.key,
-			   (FMT_UINT_CAST)(frame->attr.val >> 16u),
-			   (FMT_UINT_CAST)(frame->attr.val & 0xFFFFu));
+				   frame->len,
+				   frame->attr.key,
+				   (FMT_UINT_CAST)(frame->attr.val >> 16u),
+				   (FMT_UINT_CAST)(frame->attr.val & 0xFFFFu));
 	}
 }
 
@@ -237,13 +236,13 @@ int caniot_explain_id_str(caniot_id_t id, char *buf, size_t len)
 		ret = snprintf(buf, len, "Error frame ");
 	} else {
 		ret = snprintf(buf,
-			       len,
-			       "%02u %s-%s %s %s ",
-			       CANIOT_DID(id.cls, id.sid),
-			       get_class_str(id.cls),
-			       get_sid_str(id.sid),
-			       get_type_str(id.type),
-			       get_query_str(id.query));
+					   len,
+					   "%02u %s-%s %s %s ",
+					   CANIOT_DID(id.cls, id.sid),
+					   get_class_str(id.cls),
+					   get_sid_str(id.sid),
+					   get_type_str(id.type),
+					   get_query_str(id.query));
 	}
 
 	if (ret < 0) {
@@ -277,7 +276,7 @@ int caniot_explain_frame_str(const struct caniot_frame *frame, char *buf, size_t
 		buf += ret;
 		len -= ret;
 	} else if ((frame->id.type == CANIOT_FRAME_TYPE_TELEMETRY) ||
-		   (frame->id.type == CANIOT_FRAME_TYPE_COMMAND)) {
+			   (frame->id.type == CANIOT_FRAME_TYPE_COMMAND)) {
 		ret = snprintf(buf, len, "ep : %s", get_endpoint_str(frame->id.endpoint));
 		if (ret > (int)len || ret < 0) {
 			return ret;
@@ -297,11 +296,11 @@ int caniot_explain_frame_str(const struct caniot_frame *frame, char *buf, size_t
 		}
 	} else {
 		ret = snprintf(buf,
-			       len,
-			       "len: %d key: x%02x val: x%04x",
-			       frame->len,
-			       frame->attr.key,
-			       frame->attr.val);
+					   len,
+					   "len: %d key: x%02x val: x%04x",
+					   frame->len,
+					   frame->attr.key,
+					   frame->attr.val);
 		if (ret > (int)len || ret < 0) {
 			return ret;
 		}
@@ -348,16 +347,16 @@ int caniot_build_query_telemetry(struct caniot_frame *frame, uint8_t endpoint)
 		frame->id.type	   = CANIOT_FRAME_TYPE_TELEMETRY;
 		frame->id.query	   = CANIOT_QUERY;
 		frame->id.endpoint = endpoint;
-		frame->len	   = 0U;
-		ret		   = 0;
+		frame->len		   = 0U;
+		ret				   = 0;
 	}
 	return ret;
 }
 
 int caniot_build_query_command(struct caniot_frame *frame,
-			       uint8_t endpoint,
-			       const uint8_t *buf,
-			       uint8_t size)
+							   uint8_t endpoint,
+							   const uint8_t *buf,
+							   uint8_t size)
 {
 	ASSERT(frame);
 	ASSERT(buf);
@@ -367,7 +366,7 @@ int caniot_build_query_command(struct caniot_frame *frame,
 		frame->id.type	   = CANIOT_FRAME_TYPE_COMMAND;
 		frame->id.query	   = CANIOT_QUERY;
 		frame->id.endpoint = endpoint;
-		frame->len	   = MIN(size, sizeof(frame->buf));
+		frame->len		   = MIN(size, sizeof(frame->buf));
 		memcpy(frame->buf, buf, frame->len);
 		ret = 0;
 	}
@@ -383,15 +382,15 @@ int caniot_build_query_read_attribute(struct caniot_frame *frame, uint16_t key)
 
 	frame->id.type	= CANIOT_FRAME_TYPE_READ_ATTRIBUTE;
 	frame->id.query = CANIOT_QUERY;
-	frame->len	= 2u;
+	frame->len		= 2u;
 	frame->attr.key = key;
 
 	return 0;
 }
 
 int caniot_build_query_write_attribute(struct caniot_frame *frame,
-				       uint16_t key,
-				       uint32_t value)
+									   uint16_t key,
+									   uint32_t value)
 {
 	ASSERT(frame);
 
@@ -399,7 +398,7 @@ int caniot_build_query_write_attribute(struct caniot_frame *frame,
 	frame->id.endpoint = CANIOT_ENDPOINT_APP;
 
 	frame->id.type	= CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE;
-	frame->len	= 6u;
+	frame->len		= 6u;
 	frame->attr.key = key;
 	frame->attr.val = value;
 
@@ -416,16 +415,16 @@ bool caniot_validate_drivers_api(struct caniot_drivers_api *api)
 bool caniot_is_error(int cterr)
 {
 	return (cterr < 0) && ((uint32_t)cterr < CANIOT_ERROR_MAX) &&
-	       ((uint32_t)cterr > CANIOT_ERROR_BASE);
+		   ((uint32_t)cterr > CANIOT_ERROR_BASE);
 }
 
 bool caniot_device_is_target(caniot_did_t did, const struct caniot_frame *frame)
 {
 	return (frame->id.query == CANIOT_QUERY) &&
-	       (((frame->id.cls == CANIOT_DID_CLS(did)) &&
-		 (frame->id.sid == CANIOT_DID_SID(did))) ||
-		((frame->id.cls == CANIOT_CLASS_BROADCAST) &&
-		 (frame->id.sid == CANIOT_SUBID_BROADCAST)));
+		   (((frame->id.cls == CANIOT_DID_CLS(did)) &&
+			 (frame->id.sid == CANIOT_DID_SID(did))) ||
+			((frame->id.cls == CANIOT_CLASS_BROADCAST) &&
+			 (frame->id.sid == CANIOT_SUBID_BROADCAST)));
 }
 
 bool caniot_controller_is_target(const struct caniot_frame *frame)
@@ -502,15 +501,14 @@ caniot_id_t caniot_canid_to_id(uint16_t canid)
 
 bool caniot_is_error_frame(caniot_id_t id)
 {
-	return id.query == CANIOT_RESPONSE &&
-	       (id.type == CANIOT_FRAME_TYPE_COMMAND ||
-		id.type == CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE);
+	return id.query == CANIOT_RESPONSE && (id.type == CANIOT_FRAME_TYPE_COMMAND ||
+										   id.type == CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE);
 }
 
 bool is_telemetry_response(struct caniot_frame *frame)
 {
 	return (frame->id.query == CANIOT_RESPONSE) &&
-	       (frame->id.type == CANIOT_FRAME_TYPE_TELEMETRY);
+		   (frame->id.type == CANIOT_FRAME_TYPE_TELEMETRY);
 }
 
 caniot_frame_type_t caniot_resp_error_for(caniot_frame_type_t query)
diff --git a/src/classes.c b/src/classes.c
index 87be4cc..1f5bf2a 100644
--- a/src/classes.c
+++ b/src/classes.c
@@ -16,12 +16,11 @@ void caniot_blc1_command_init(struct caniot_blc1_command *cmd)
 }
 
 int caniot_blc0_telemetry_ser(const struct caniot_blc0_telemetry *t,
-			      uint8_t *buf,
-			      uint8_t *len)
+							  uint8_t *buf,
+							  uint8_t *len)
 {
 #if CONFIG_CANIOT_CHECKS
-	if (!t || !buf || !len || *len < CANIOT_BLC0_TELEMETRY_BUF_LEN)
-		return -CANIOT_EINVAL;
+	if (!t || !buf || !len || *len < CANIOT_BLC0_TELEMETRY_BUF_LEN) return -CANIOT_EINVAL;
 #endif
 
 	buf[0] = t->dio;
@@ -44,17 +43,17 @@ int caniot_blc0_telemetry_ser(const struct caniot_blc0_telemetry *t,
 }
 
 int caniot_blc0_telemetry_get(struct caniot_blc0_telemetry *t,
-			      const uint8_t *buf,
-			      uint8_t len)
+							  const uint8_t *buf,
+							  uint8_t len)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!t || !buf || len < CANIOT_BLC0_TELEMETRY_BUF_LEN) return -CANIOT_EINVAL;
 #endif
 
-	t->dio		    = buf[0];
-	t->pdio		    = buf[1] & 0x0Fu;
-	t->int_temperature  = (buf[2]) | ((buf[3] & 0x03u) << 8);
-	t->ext_temperature  = ((buf[3] >> 2) & 0x3Fu) | ((buf[4] & 0x0Fu) << 6);
+	t->dio				= buf[0];
+	t->pdio				= buf[1] & 0x0Fu;
+	t->int_temperature	= (buf[2]) | ((buf[3] & 0x03u) << 8);
+	t->ext_temperature	= ((buf[3] >> 2) & 0x3Fu) | ((buf[4] & 0x0Fu) << 6);
 	t->ext_temperature2 = ((buf[4] >> 4) & 0x0Fu) | ((buf[5] & 0x3Fu) << 4);
 	t->ext_temperature3 = ((buf[5] >> 6) & 0x03u) | ((buf[6]) << 2);
 
@@ -62,12 +61,11 @@ int caniot_blc0_telemetry_get(struct caniot_blc0_telemetry *t,
 }
 
 int caniot_blc0_command_ser(const struct caniot_blc0_command *t,
-			    uint8_t *buf,
-			    uint8_t *len)
+							uint8_t *buf,
+							uint8_t *len)
 {
 #if CONFIG_CANIOT_CHECKS
-	if (!t || !buf || !len || *len < CANIOT_BLC0_COMMAND_BUF_LEN)
-		return -CANIOT_EINVAL;
+	if (!t || !buf || !len || *len < CANIOT_BLC0_COMMAND_BUF_LEN) return -CANIOT_EINVAL;
 #endif
 
 	buf[0] = t->coc1 | (t->coc2 << 3) | ((t->crl1 & 0x03u) << 6);
@@ -79,8 +77,8 @@ int caniot_blc0_command_ser(const struct caniot_blc0_command *t,
 }
 
 int caniot_blc0_command_get(struct caniot_blc0_command *t,
-			    const uint8_t *buf,
-			    uint8_t len)
+							const uint8_t *buf,
+							uint8_t len)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!t || !buf || len < CANIOT_BLC0_COMMAND_BUF_LEN) return -CANIOT_EINVAL;
@@ -127,9 +125,9 @@ static caniot_complex_digital_cmd_t z_blc1_cmd_parse_xps(const uint8_t *buf, uin
 }
 
 int caniot_blc1_cmd_set_xps(caniot_complex_digital_cmd_t xps,
-			    uint8_t *buf,
-			    uint8_t len,
-			    uint8_t n)
+							uint8_t *buf,
+							uint8_t len,
+							uint8_t n)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!buf || n >= CANIOT_CLASS1_IO_COUNT || len >= CANIOT_BLC1_COMMAND_BUF_LEN)
@@ -142,13 +140,13 @@ int caniot_blc1_cmd_set_xps(caniot_complex_digital_cmd_t xps,
 }
 
 int caniot_blc1_cmd_parse_xps(caniot_complex_digital_cmd_t *xps,
-			      const uint8_t *buf,
-			      uint8_t len,
-			      uint8_t n)
+							  const uint8_t *buf,
+							  uint8_t len,
+							  uint8_t n)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!buf || !xps || n >= CANIOT_CLASS1_IO_COUNT ||
-	    len >= CANIOT_BLC1_COMMAND_BUF_LEN) {
+		len >= CANIOT_BLC1_COMMAND_BUF_LEN) {
 		if (xps) *xps = CANIOT_XPS_NONE;
 		return -CANIOT_EINVAL;
 	}
@@ -160,12 +158,11 @@ int caniot_blc1_cmd_parse_xps(caniot_complex_digital_cmd_t *xps,
 }
 
 int caniot_blc1_telemetry_ser(const struct caniot_blc1_telemetry *t,
-			      uint8_t *buf,
-			      uint8_t *len)
+							  uint8_t *buf,
+							  uint8_t *len)
 {
 #if CONFIG_CANIOT_CHECKS
-	if (!t || !buf || !len || *len < CANIOT_BLC1_TELEMETRY_BUF_LEN)
-		return -CANIOT_EINVAL;
+	if (!t || !buf || !len || *len < CANIOT_BLC1_TELEMETRY_BUF_LEN) return -CANIOT_EINVAL;
 #endif
 
 	buf[0] = t->pcpd;
@@ -190,8 +187,8 @@ int caniot_blc1_telemetry_ser(const struct caniot_blc1_telemetry *t,
 }
 
 int caniot_blc1_telemetry_get(struct caniot_blc1_telemetry *t,
-			      const uint8_t *buf,
-			      uint8_t len)
+							  const uint8_t *buf,
+							  uint8_t len)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!t || !buf || len < CANIOT_BLC1_TELEMETRY_BUF_LEN) return -CANIOT_EINVAL;
@@ -203,8 +200,8 @@ int caniot_blc1_telemetry_get(struct caniot_blc1_telemetry *t,
 	t->pe0	= (buf[2] >> 1) & 0x01u;
 	t->pe1	= (buf[2] >> 2) & 0x01u;
 
-	t->int_temperature  = (buf[3]) | ((buf[4] & 0x03u) << 8);
-	t->ext_temperature  = ((buf[4] >> 2) & 0x3fu) | ((buf[5] & 0x0fu) << 6);
+	t->int_temperature	= (buf[3]) | ((buf[4] & 0x03u) << 8);
+	t->ext_temperature	= ((buf[4] >> 2) & 0x3fu) | ((buf[5] & 0x0fu) << 6);
 	t->ext_temperature2 = ((buf[5] >> 4) & 0x0fu) | ((buf[6] & 0x3fu) << 4);
 	t->ext_temperature3 = ((buf[6] >> 6) & 0x03u) | ((buf[7]) << 2);
 
@@ -212,12 +209,11 @@ int caniot_blc1_telemetry_get(struct caniot_blc1_telemetry *t,
 }
 
 int caniot_blc1_command_ser(const struct caniot_blc1_command *t,
-			    uint8_t *buf,
-			    uint8_t *len)
+							uint8_t *buf,
+							uint8_t *len)
 {
 #if CONFIG_CANIOT_CHECKS
-	if (!t || !buf || !len || *len < CANIOT_BLC1_COMMAND_BUF_LEN)
-		return -CANIOT_EINVAL;
+	if (!t || !buf || !len || *len < CANIOT_BLC1_COMMAND_BUF_LEN) return -CANIOT_EINVAL;
 #endif
 
 	for (uint8_t i = 0u; i < CANIOT_CLASS1_IO_COUNT; i++) {
@@ -230,8 +226,8 @@ int caniot_blc1_command_ser(const struct caniot_blc1_command *t,
 }
 
 int caniot_blc1_command_get(struct caniot_blc1_command *t,
-			    const uint8_t *buf,
-			    uint8_t len)
+							const uint8_t *buf,
+							uint8_t len)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!t || !buf || len < CANIOT_BLC1_COMMAND_BUF_LEN) return -CANIOT_EINVAL;
diff --git a/src/controller.c b/src/controller.c
index ba23568..519e242 100644
--- a/src/controller.c
+++ b/src/controller.c
@@ -8,7 +8,7 @@
 #include <caniot/controller.h>
 
 #define pendq caniot_pendq
-#define pqt   caniot_pendq_time_handle
+#define pqt	  caniot_pendq_time_handle
 
 #define __DBG(fmt, ...) CANIOT_DBG("-- " fmt, ##__VA_ARGS__)
 
@@ -124,7 +124,7 @@ static struct pendq *pendq_pop_expired(struct pqt **root)
 
 	if ((*root != NULL) && ((*root)->delay == 0)) {
 		struct pqt *item = *root;
-		*root		 = (*root)->next;
+		*root			 = (*root)->next;
 
 		pq = CONTAINER_OF(item, struct pendq, tie);
 	}
@@ -142,7 +142,7 @@ static struct pendq *pendq_pop(struct pqt **root)
 
 	if (*root != NULL) {
 		struct pqt *item = *root;
-		*root		 = (*root)->next;
+		*root			 = (*root)->next;
 
 		pq = CONTAINER_OF(item, struct pendq, tie);
 	}
@@ -198,8 +198,8 @@ static void pendq_free(struct caniot_controller *ctrl, struct pendq *pq)
 	if (pq != NULL) {
 		__DBG("pendq_free(pq: %p)\n", (void *)pq);
 
-		pq->next		 = ctrl->pendingq.free_list;
-		pq->handle		 = INVALID_HANDLE;
+		pq->next				 = ctrl->pendingq.free_list;
+		pq->handle				 = INVALID_HANDLE;
 		ctrl->pendingq.free_list = pq;
 	} else {
 		__DBG("pendq_free(NULL)\n");
@@ -212,7 +212,7 @@ static void pendq_init_queue(struct caniot_controller *ctrl)
 
 	/* init free list */
 	ctrl->pendingq.free_list = NULL;
-	struct pendq *cur	 = ctrl->pendingq.pool;
+	struct pendq *cur		 = ctrl->pendingq.pool;
 	while (cur < ctrl->pendingq.pool + CONFIG_CANIOT_MAX_PENDING_QUERIES) {
 		pendq_free(ctrl, cur++);
 	}
@@ -270,26 +270,26 @@ static bool pendq_is_broadcast(struct pendq *pq)
 }
 
 int caniot_controller_query_user_data_set(struct caniot_controller *ctrl,
-					  uint8_t handle,
-					  void *user_data)
+										  uint8_t handle,
+										  void *user_data)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!ctrl) return -CANIOT_EINVAL;
 #endif
 
-	int ret		 = -CANIOT_EINVAL;
+	int ret			 = -CANIOT_EINVAL;
 	struct pendq *pq = pendq_get_by_handle(ctrl, handle);
 
 	if (pq != NULL) {
 		pq->user_data = user_data;
-		ret	      = 0;
+		ret			  = 0;
 	}
 
 	return ret;
 }
 
 void *caniot_controller_query_user_data_get(struct caniot_controller *ctrl,
-					    uint8_t handle)
+											uint8_t handle)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!ctrl) return NULL;
@@ -336,8 +336,8 @@ static void pendq_remove(struct caniot_controller *ctrl, struct pendq *pq)
 
 // Initialize ctrl structure
 int caniot_controller_init(struct caniot_controller *ctrl,
-			   caniot_controller_event_cb_t cb,
-			   void *user_data)
+						   caniot_controller_event_cb_t cb,
+						   void *user_data)
 {
 	int ret = 0;
 
@@ -364,9 +364,9 @@ exit:
 
 #if CONFIG_CANIOT_CTRL_DRIVERS_API
 int caniot_controller_driv_init(struct caniot_controller *ctrl,
-				const struct caniot_drivers_api *driv,
-				caniot_controller_event_cb_t cb,
-				void *user_data)
+								const struct caniot_drivers_api *driv,
+								caniot_controller_event_cb_t cb,
+								void *user_data)
 {
 	int ret = caniot_controller_init(ctrl, cb, user_data);
 	if (ret < 0) {
@@ -384,9 +384,9 @@ exit:
 }
 #else
 int caniot_controller_driv_init(struct caniot_controller *ctrl,
-				const struct caniot_drivers_api *driv,
-				caniot_controller_event_cb_t cb,
-				void *user_data)
+								const struct caniot_drivers_api *driv,
+								caniot_controller_event_cb_t cb,
+								void *user_data)
 {
 	(void)ctrl;
 	(void)driv;
@@ -415,45 +415,45 @@ uint32_t caniot_controller_next_timeout(const struct caniot_controller *ctrl)
 }
 
 static bool call_user_callback(struct caniot_controller *ctrl,
-			       const caniot_controller_event_t *ev)
+							   const caniot_controller_event_t *ev)
 {
 	ASSERT(ctrl != NULL);
 	ASSERT(ev != NULL);
 	ASSERT(ctrl->event_cb != NULL);
 
 	__DBG("call_user_callback(ev: %p) -> did: %u handle: %u ctx: %u status: %u term: "
-	      "%u "
-	      "resp: %p\n",
-	      (void *)ev,
-	      ev->did,
-	      ev->handle,
-	      ev->context,
-	      ev->status,
-	      ev->terminated,
-	      (void *)ev->response);
+		  "%u "
+		  "resp: %p\n",
+		  (void *)ev,
+		  ev->did,
+		  ev->handle,
+		  ev->context,
+		  ev->status,
+		  ev->terminated,
+		  (void *)ev->response);
 
 	return ctrl->event_cb(ev, ctrl->user_data);
 }
 
 static void orphan_resp_event(struct caniot_controller *ctrl,
-			      const struct caniot_frame *response)
+							  const struct caniot_frame *response)
 {
 	ASSERT(ctrl != NULL);
 	ASSERT(response != NULL);
 
 	const caniot_did_t did = CANIOT_DID(response->id.cls, response->id.sid);
-	const bool is_error    = caniot_is_error_frame(response->id);
+	const bool is_error	   = caniot_is_error_frame(response->id);
 
 	const caniot_controller_event_t ev = {
 		.controller = ctrl,
-		.context    = CANIOT_CONTROLLER_EVENT_CONTEXT_ORPHAN,
-		.status	    = is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
-				       : CANIOT_CONTROLLER_EVENT_STATUS_OK,
+		.context	= CANIOT_CONTROLLER_EVENT_CONTEXT_ORPHAN,
+		.status		= is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
+							   : CANIOT_CONTROLLER_EVENT_STATUS_OK,
 
 		.did = did,
 
 		.terminated = 1U, /* meaningless in this context */
-		.handle	    = 0U, /* meaningless in this context */
+		.handle		= 0U, /* meaningless in this context */
 
 		.response = response,
 
@@ -482,13 +482,13 @@ cancelled_query_event(struct caniot_controller *ctrl, struct pendq *pq, bool sup
 
 	const caniot_controller_event_t ev = {
 		.controller = ctrl,
-		.context    = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		.status	    = CANIOT_CONTROLLER_EVENT_STATUS_CANCELLED,
+		.context	= CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+		.status		= CANIOT_CONTROLLER_EVENT_STATUS_CANCELLED,
 
 		.did = pq->did,
 
 		.terminated = 1U,
-		.handle	    = pq->handle,
+		.handle		= pq->handle,
 
 		.response  = NULL,
 		.user_data = pq->user_data,
@@ -513,13 +513,13 @@ static void pendq_call_expired(struct caniot_controller *ctrl)
 	while ((pq = pendq_pop_expired(q)) != NULL) {
 		const caniot_controller_event_t ev = {
 			.controller = ctrl,
-			.context    = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-			.status	    = CANIOT_CONTROLLER_EVENT_STATUS_TIMEOUT,
+			.context	= CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+			.status		= CANIOT_CONTROLLER_EVENT_STATUS_TIMEOUT,
 
 			.did = pq->did,
 
 			.terminated = 1U,
-			.handle	    = pq->handle,
+			.handle		= pq->handle,
 
 			.response  = NULL,
 			.user_data = pq->user_data,
@@ -537,16 +537,16 @@ static void pendq_call_expired(struct caniot_controller *ctrl)
 }
 
 static struct pendq *pendq_alloc_and_prepare(struct caniot_controller *ctrl,
-					     caniot_did_t did,
-					     struct caniot_frame *frame)
+											 caniot_did_t did,
+											 struct caniot_frame *frame)
 {
 	/* allocate */
 	struct pendq *pq = pendq_alloc(ctrl);
 
 	if (pq != NULL) {
 		/* prepare data */
-		pq->did	       = did;
-		pq->handle     = 1U + INDEX_OF(pq, ctrl->pendingq.pool, struct pendq);
+		pq->did		   = did;
+		pq->handle	   = 1U + INDEX_OF(pq, ctrl->pendingq.pool, struct pendq);
 		pq->query_type = frame->id.type;
 		pq->notified   = 0llu;
 
@@ -572,10 +572,10 @@ static struct pendq *pendq_alloc_and_prepare(struct caniot_controller *ctrl,
 }
 
 static int query(struct caniot_controller *ctrl,
-		 caniot_did_t did,
-		 struct caniot_frame *frame,
-		 uint32_t timeout,
-		 bool driv_send)
+				 caniot_did_t did,
+				 struct caniot_frame *frame,
+				 uint32_t timeout,
+				 bool driv_send)
 {
 	int ret;
 
@@ -585,7 +585,7 @@ static int query(struct caniot_controller *ctrl,
 #endif
 
 	const bool alloc_context = timeout != 0U;
-	struct pendq *pq	 = NULL;
+	struct pendq *pq		 = NULL;
 
 	/* if timeout is defined, we need to allocate a context */
 	if (alloc_context == true) {
@@ -636,19 +636,19 @@ static int query(struct caniot_controller *ctrl,
 
 exit:
 	__DBG("query(did: %u, frame: %p, timeout: %u, driv: %u) -> ret (handle): %d\n",
-	      did,
-	      (void *)frame,
-	      timeout,
-	      (uint32_t)driv_send,
-	      ret);
+		  did,
+		  (void *)frame,
+		  timeout,
+		  (uint32_t)driv_send,
+		  ret);
 
 	return ret;
 }
 
 int caniot_controller_query_register(struct caniot_controller *ctrl,
-				     caniot_did_t did,
-				     struct caniot_frame *frame,
-				     uint32_t timeout)
+									 caniot_did_t did,
+									 struct caniot_frame *frame,
+									 uint32_t timeout)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!ctrl || !frame) return -CANIOT_EINVAL;
@@ -657,11 +657,11 @@ int caniot_controller_query_register(struct caniot_controller *ctrl,
 	int ret = query(ctrl, did, frame, timeout, false);
 
 	__DBG("caniot_controller_query_register(did: %u, frame: %p, timeout: %u) -> ret: "
-	      "%d\n",
-	      did,
-	      (void *)frame,
-	      timeout,
-	      ret);
+		  "%d\n",
+		  did,
+		  (void *)frame,
+		  timeout,
+		  ret);
 
 	return ret;
 }
@@ -674,16 +674,14 @@ bool caniot_controller_query_pending(struct caniot_controller *ctrl, uint8_t han
 
 	struct pendq *const pq = pendq_get_by_handle(ctrl, handle);
 
-	__DBG("caniot_controller_query_pending(handle: %u) -> pq: %u\n",
-	      handle,
-	      pq != NULL);
+	__DBG("caniot_controller_query_pending(handle: %u) -> pq: %u\n", handle, pq != NULL);
 
 	return pq != NULL;
 }
 
 int caniot_controller_query_cancel(struct caniot_controller *ctrl,
-				   uint8_t handle,
-				   bool suppress)
+								   uint8_t handle,
+								   bool suppress)
 {
 	int ret;
 
@@ -705,9 +703,9 @@ int caniot_controller_query_cancel(struct caniot_controller *ctrl,
 	ret = 0;
 exit:
 	__DBG("caniot_controller_query_cancel(handle: %u, suppress: %u) -> ret: %d\n",
-	      handle,
-	      suppress,
-	      ret);
+		  handle,
+		  suppress,
+		  ret);
 
 	return ret;
 }
@@ -716,10 +714,10 @@ static bool
 is_response_to(const struct caniot_frame *frame, struct pendq *pq, bool *p_is_error)
 {
 	ASSERT((pq->did == CANIOT_DID(frame->id.cls, frame->id.sid)) ||
-	       (pq->did == CANIOT_DID_BROADCAST));
+		   (pq->did == CANIOT_DID_BROADCAST));
 
-	bool match		      = false;
-	bool is_error		      = false;
+	bool match					  = false;
+	bool is_error				  = false;
 	caniot_frame_type_t resp_type = frame->id.type;
 
 	switch (pq->query_type) {
@@ -763,20 +761,20 @@ is_response_to(const struct caniot_frame *frame, struct pendq *pq, bool *p_is_er
 }
 
 static void pendq_handle_device_resp(struct caniot_controller *ctrl,
-				     struct pendq *pq,
-				     const struct caniot_frame *response,
-				     bool is_error)
+									 struct pendq *pq,
+									 const struct caniot_frame *response,
+									 bool is_error)
 {
 	const caniot_controller_event_t ev = {
 		.controller = ctrl,
-		.context    = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		.status	    = is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
-				       : CANIOT_CONTROLLER_EVENT_STATUS_OK,
+		.context	= CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+		.status		= is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
+							   : CANIOT_CONTROLLER_EVENT_STATUS_OK,
 
 		.did = CANIOT_DID(response->id.cls, response->id.sid),
 
 		.terminated = true,
-		.handle	    = pq->handle,
+		.handle		= pq->handle,
 
 		.response  = response,
 		.user_data = pq->user_data,
@@ -794,22 +792,22 @@ static void pendq_handle_device_resp(struct caniot_controller *ctrl,
 }
 
 static void pendq_handle_broadcast_resp(struct caniot_controller *ctrl,
-					struct pendq *pq,
-					const struct caniot_frame *response,
-					bool is_error)
+										struct pendq *pq,
+										const struct caniot_frame *response,
+										bool is_error)
 {
 	ASSERT(caniot_is_broadcast(pq->did));
 
 	const caniot_controller_event_t ev = {
 		.controller = ctrl,
-		.context    = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		.status	    = is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
-				       : CANIOT_CONTROLLER_EVENT_STATUS_OK,
+		.context	= CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+		.status		= is_error ? CANIOT_CONTROLLER_EVENT_STATUS_ERROR
+							   : CANIOT_CONTROLLER_EVENT_STATUS_OK,
 
 		.did = CANIOT_DID_BROADCAST,
 
 		.terminated = false,
-		.handle	    = pq->handle,
+		.handle		= pq->handle,
 
 		.response  = response,
 		.user_data = pq->user_data,
@@ -833,10 +831,7 @@ static void pendq_handle_broadcast_resp(struct caniot_controller *ctrl,
 #if CONFIG_CANIOT_CONTROLLER_DISCOVERY
 		if (!is_error || ctrl->discovery.params.admit_errors == true) {
 			bool continue_discovery = ctrl->discovery.params.user_callback(
-				ctrl,
-				ev.did,
-				ev.response,
-				ctrl->discovery.params.user_data);
+				ctrl, ev.did, ev.response, ctrl->discovery.params.user_data);
 			if (continue_discovery == false) {
 				stop_discovery(ctrl);
 			}
@@ -868,8 +863,8 @@ static void pendq_handle_broadcast_resp(struct caniot_controller *ctrl,
  * @return false Otherwise
  */
 static bool pendq_handle_frame(struct caniot_controller *ctrl,
-			       struct pendq *pq,
-			       const struct caniot_frame *response)
+							   struct pendq *pq,
+							   const struct caniot_frame *response)
 {
 	ASSERT(pq != NULL);
 	ASSERT(response != NULL);
@@ -888,7 +883,7 @@ static bool pendq_handle_frame(struct caniot_controller *ctrl,
 }
 
 static int caniot_controller_handle_rx_frame(struct caniot_controller *ctrl,
-					     const struct caniot_frame *frame)
+											 const struct caniot_frame *frame)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!ctrl || !frame) return -CANIOT_EINVAL;
@@ -896,7 +891,7 @@ static int caniot_controller_handle_rx_frame(struct caniot_controller *ctrl,
 #endif
 
 	struct pendq *pq;
-	bool orphan	       = true;
+	bool orphan			   = true;
 	const caniot_did_t did = CANIOT_DID(frame->id.cls, frame->id.sid);
 
 	/* If a query is pending and the frame is the response for it
@@ -923,8 +918,8 @@ static int caniot_controller_handle_rx_frame(struct caniot_controller *ctrl,
 }
 
 int caniot_controller_rx_frame(struct caniot_controller *ctrl,
-			       uint32_t time_passed_ms,
-			       const struct caniot_frame *frame)
+							   uint32_t time_passed_ms,
+							   const struct caniot_frame *frame)
 {
 #if CONFIG_CANIOT_CHECKS
 	if (!ctrl) return -CANIOT_EINVAL;
@@ -944,8 +939,8 @@ int caniot_controller_rx_frame(struct caniot_controller *ctrl,
 	pendq_call_expired(ctrl);
 
 	__DBG("caniot_controller_rx_frame(time_passed_ms: %u, frame: %p) -> ret: 0\n",
-	      time_passed_ms,
-	      (void *)frame);
+		  time_passed_ms,
+		  (void *)frame);
 
 	return 0U;
 }
@@ -971,8 +966,8 @@ int caniot_controller_deinit(struct caniot_controller *ctrl)
 #if CONFIG_CANIOT_CTRL_DRIVERS_API
 
 int caniot_controller_send(struct caniot_controller *ctrl,
-			   caniot_did_t did,
-			   struct caniot_frame *frame)
+						   caniot_did_t did,
+						   struct caniot_frame *frame)
 {
 	/* As timeout is 0U, no context is created and the frame is
 	 * sent immediately. Without expecting a response. */
@@ -984,18 +979,18 @@ int caniot_controller_send(struct caniot_controller *ctrl,
 }
 
 int caniot_controller_query(struct caniot_controller *ctrl,
-			    caniot_did_t did,
-			    struct caniot_frame *frame,
-			    uint32_t timeout)
+							caniot_did_t did,
+							struct caniot_frame *frame,
+							uint32_t timeout)
 {
 	int ret = query(ctrl, did, frame, timeout, true);
 
 	__DBG("caniot_controller_query(did: %u, frame: %p, timeout: %u) -> ret (handle): "
-	      "%d\n",
-	      did,
-	      (void *)frame,
-	      timeout,
-	      ret);
+		  "%d\n",
+		  did,
+		  (void *)frame,
+		  timeout,
+		  ret);
 
 	return ret;
 }
@@ -1011,8 +1006,7 @@ static uint32_t process_get_diff_ms(struct caniot_controller *ctrl)
 
 	ctrl->driv->get_time(&ctrl->last_process.sec, &ctrl->last_process.ms);
 
-	return (ctrl->last_process.sec - last_sec) * 1000 + ctrl->last_process.ms -
-	       last_ms;
+	return (ctrl->last_process.sec - last_sec) * 1000 + ctrl->last_process.ms - last_ms;
 }
 
 int caniot_controller_process(struct caniot_controller *ctrl)
@@ -1061,7 +1055,7 @@ static void stop_discovery(struct caniot_controller *ctrl)
 }
 
 int caniot_controller_discovery_start(struct caniot_controller *ctrl,
-				      const struct caniot_discovery_params *params)
+									  const struct caniot_discovery_params *params)
 {
 	int ret;
 	struct caniot_frame frame;
@@ -1083,16 +1077,15 @@ int caniot_controller_discovery_start(struct caniot_controller *ctrl,
 		if (params->type == CANIOT_DISCOVERY_TYPE_TELEMETRY) {
 			ret = caniot_build_query_telemetry(&frame, params->data.endpoint);
 		} else if (params->type == CANIOT_DISCOVERY_TYPE_ATTRIBUTE) {
-			ret = caniot_build_query_read_attribute(&frame,
-								params->data.attr_key);
+			ret = caniot_build_query_read_attribute(&frame, params->data.attr_key);
 		} else {
 			ret = -CANIOT_ENOTSUP;
 		}
 
 		if (ret) return ret;
 
-		ret = caniot_controller_query(
-			ctrl, CANIOT_DID_BROADCAST, &frame, params->timeout);
+		ret =
+			caniot_controller_query(ctrl, CANIOT_DID_BROADCAST, &frame, params->timeout);
 		if (ret >= 0) {
 			ctrl->discovery.handle = ret;
 		} else {
@@ -1106,11 +1099,10 @@ int caniot_controller_discovery_start(struct caniot_controller *ctrl,
 	case CANIOT_DISCOVERY_MODE_PASSIVE: {
 
 		/* Passive mode does not support attribute discovery */
-		if (params->type == CANIOT_DISCOVERY_TYPE_ATTRIBUTE)
-			return -CANIOT_ENOTSUP;
+		if (params->type == CANIOT_DISCOVERY_TYPE_ATTRIBUTE) return -CANIOT_ENOTSUP;
 
 		ctrl->discovery.handle = 0u; /* No pendq */
-		ret		       = 0;
+		ret					   = 0;
 		break;
 	}
 
@@ -1190,22 +1182,21 @@ const char *caniot_controller_event_status_to_str(caniot_controller_event_status
 }
 
 bool caniot_controller_dbg_event_cb_stub(const caniot_controller_event_t *ev,
-					 void *user_data)
+										 void *user_data)
 {
-	CANIOT_INF(
-		"cb stub ev: %p user: %p did: %u handle: %u ctx: %s (%u) status: %s (%u) "
-		"response: %p terminated: %u (ev pq: user: %p)\n",
-		(void *)ev,
-		user_data,
-		ev->did,
-		ev->handle,
-		caniot_controller_event_context_to_str(ev->context),
-		ev->context,
-		caniot_controller_event_status_to_str(ev->status),
-		ev->status,
-		(void *)ev->response,
-		ev->terminated,
-		ev->user_data);
+	CANIOT_INF("cb stub ev: %p user: %p did: %u handle: %u ctx: %s (%u) status: %s (%u) "
+			   "response: %p terminated: %u (ev pq: user: %p)\n",
+			   (void *)ev,
+			   user_data,
+			   ev->did,
+			   ev->handle,
+			   caniot_controller_event_context_to_str(ev->context),
+			   ev->context,
+			   caniot_controller_event_status_to_str(ev->status),
+			   ev->status,
+			   (void *)ev->response,
+			   ev->terminated,
+			   ev->user_data);
 
 	return true;
 }
\ No newline at end of file
diff --git a/src/datatype.c b/src/datatype.c
index 4a41031..ff15c05 100644
--- a/src/datatype.c
+++ b/src/datatype.c
@@ -55,9 +55,9 @@ void caniot_blc_sys_command_from_byte(struct caniot_blc_sys_command *cmd, uint8_
 {
 	ASSERT(cmd != NULL);
 
-	cmd->reset	    = (byte >> 0) & 0x01u;
+	cmd->reset			= (byte >> 0) & 0x01u;
 	cmd->software_reset = (byte >> 1) & 0x01u;
 	cmd->watchdog_reset = (byte >> 2) & 0x01u;
-	cmd->watchdog	    = (byte >> 3) & 0x03u;
-	cmd->config_reset   = (byte >> 5) & 0x01u;
+	cmd->watchdog		= (byte >> 3) & 0x03u;
+	cmd->config_reset	= (byte >> 5) & 0x01u;
 }
\ No newline at end of file
diff --git a/src/device.c b/src/device.c
index 64f8549..bd50ab8 100644
--- a/src/device.c
+++ b/src/device.c
@@ -26,17 +26,17 @@ enum section_option {
 #define ATTR_OPTION_CLASS_ALL_POS 5u
 
 enum attr_option {
-	HIDDEN	       = 0u,
-	READABLE       = 1 << ATTR_OPTION_READABLE_POS,
-	WRITABLE       = 1 << ATTR_OPTION_WRITABLE_POS,
-	ATTR_CLASS0    = 0u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS1    = 1u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS2    = 2u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS3    = 3u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS4    = 4u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS5    = 5u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS6    = 6u << ATTR_OPTION_CLASS_POS,
-	ATTR_CLASS7    = 7u << ATTR_OPTION_CLASS_POS,
+	HIDDEN		   = 0u,
+	READABLE	   = 1 << ATTR_OPTION_READABLE_POS,
+	WRITABLE	   = 1 << ATTR_OPTION_WRITABLE_POS,
+	ATTR_CLASS0	   = 0u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS1	   = 1u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS2	   = 2u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS3	   = 3u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS4	   = 4u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS5	   = 5u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS6	   = 6u << ATTR_OPTION_CLASS_POS,
+	ATTR_CLASS7	   = 7u << ATTR_OPTION_CLASS_POS,
 	ATTR_CLASS_ALL = 1 << ATTR_OPTION_CLASS_ALL_POS,
 	// OPT_POS6 = 1 << 6u,
 	// OPT_POS7 = 1 << 7u,
@@ -69,20 +69,20 @@ struct attr_section {
 };
 
 #define ATTR_IDENTIFICATION 0
-#define ATTR_SYSTEM	    1
-#define ATTR_CONFIG	    2
+#define ATTR_SYSTEM			1
+#define ATTR_CONFIG			2
 
 #define ATTR_KEY_SECTION_OFFSET 12u
 #define ATTR_KEY_SECTION_SIZE	4u
 #define ATTR_KEY_SECTION_MASK	((1u << ATTR_KEY_SECTION_SIZE) - 1u)
 
 #define ATTR_KEY_ATTR_OFFSET 4u
-#define ATTR_KEY_ATTR_SIZE   8u
-#define ATTR_KEY_ATTR_MASK   ((1u << ATTR_KEY_ATTR_SIZE) - 1u)
+#define ATTR_KEY_ATTR_SIZE	 8u
+#define ATTR_KEY_ATTR_MASK	 ((1u << ATTR_KEY_ATTR_SIZE) - 1u)
 
 #define ATTR_KEY_PART_OFFSET 0u
-#define ATTR_KEY_PART_SIZE   4u
-#define ATTR_KEY_PART_MASK   ((1u << ATTR_KEY_PART_SIZE) - 1u)
+#define ATTR_KEY_PART_SIZE	 4u
+#define ATTR_KEY_PART_MASK	 ((1u << ATTR_KEY_PART_SIZE) - 1u)
 
 #define ATTR_KEY_SECTION_GET(key)                                                        \
 	(((key) >> ATTR_KEY_SECTION_OFFSET) & ATTR_KEY_SECTION_MASK)
@@ -90,14 +90,14 @@ struct attr_section {
 #define ATTR_KEY_PART_GET(key) (((key) >> ATTR_KEY_PART_OFFSET) & ATTR_KEY_PART_MASK)
 
 #define ATTR_KEY_SECTION_SET(key, section)                                               \
-	((key) = ((key) & ~(ATTR_KEY_SECTION_MASK << ATTR_KEY_SECTION_OFFSET)) |         \
-		 ((section & ATTR_KEY_SECTION_MASK) << ATTR_KEY_SECTION_OFFSET))
+	((key) = ((key) & ~(ATTR_KEY_SECTION_MASK << ATTR_KEY_SECTION_OFFSET)) |             \
+			 ((section & ATTR_KEY_SECTION_MASK) << ATTR_KEY_SECTION_OFFSET))
 #define ATTR_KEY_ATTR_SET(key, attr)                                                     \
-	((key) = ((key) & ~(ATTR_KEY_ATTR_MASK << ATTR_KEY_ATTR_OFFSET)) |               \
-		 ((attr & ATTR_KEY_ATTR_MASK) << ATTR_KEY_ATTR_OFFSET))
+	((key) = ((key) & ~(ATTR_KEY_ATTR_MASK << ATTR_KEY_ATTR_OFFSET)) |                   \
+			 ((attr & ATTR_KEY_ATTR_MASK) << ATTR_KEY_ATTR_OFFSET))
 #define ATTR_KEY_PART_SET(key, part)                                                     \
-	((key) = ((key) & ~(ATTR_KEY_PART_MASK << ATTR_KEY_PART_OFFSET)) |               \
-		 ((part & ATTR_KEY_PART_MASK) << ATTR_KEY_PART_OFFSET))
+	((key) = ((key) & ~(ATTR_KEY_PART_MASK << ATTR_KEY_PART_OFFSET)) |                   \
+			 ((part & ATTR_KEY_PART_MASK) << ATTR_KEY_PART_OFFSET))
 
 /* A part is is 4B */
 #define ATTR_KEY_DATA_BYTE_OFFSET(key) (ATTR_KEY_PART_GET(key) << 2)
@@ -116,28 +116,27 @@ static void attr_option_adjust(enum attr_option *attr_opt, enum section_option s
 #if CONFIG_CANIOT_ATTRIBUTE_NAME
 
 #define ATTRIBUTE_HELPER(s, opt, _name, param)                                           \
-	{                                                                                \
-		.offset = (uint8_t)offsetof(s, param),                                   \
-		.size = (uint8_t)MEMBER_SIZEOF(s, param), .option = (uint8_t)(opt),      \
-		.name = _name,                                                           \
+	{                                                                                    \
+		.offset = (uint8_t)offsetof(s, param), .size = (uint8_t)MEMBER_SIZEOF(s, param), \
+		.option = (uint8_t)(opt), .name = _name,                                         \
 	}
 
 #define SECTION(options, _name, array)                                                   \
-	{                                                                                \
-		options, array, ARRAY_SIZE(array), _name                                 \
+	{                                                                                    \
+		options, array, ARRAY_SIZE(array), _name                                         \
 	}
 
 #else
 
 #define ATTRIBUTE_HELPER(s, opt, _name, param)                                           \
-	{                                                                                \
-		.offset = (uint8_t)offsetof(s, param),                                   \
-		.size = (uint8_t)MEMBER_SIZEOF(s, param), .option = (uint8_t)(opt),      \
+	{                                                                                    \
+		.offset = (uint8_t)offsetof(s, param), .size = (uint8_t)MEMBER_SIZEOF(s, param), \
+		.option = (uint8_t)(opt),                                                        \
 	}
 
 #define SECTION(options, _name, array)                                                   \
-	{                                                                                \
-		options, array, ARRAY_SIZE(array)                                        \
+	{                                                                                    \
+		options, array, ARRAY_SIZE(array)                                                \
 	}
 
 #endif
@@ -154,237 +153,225 @@ static const struct attribute identification_attr[] ROM = {
 	[0x0] = ATTRIBUTE(struct caniot_device_id, READABLE, "nodeid", did),
 	[0x1] = ATTRIBUTE(struct caniot_device_id, READABLE, "version", version),
 	[0x2] = ATTRIBUTE(struct caniot_device_id, READABLE, "name", name),
-	[0x3] = ATTRIBUTE(
-		struct caniot_device_id, READABLE, "magic_number", magic_number),
+	[0x3] = ATTRIBUTE(struct caniot_device_id, READABLE, "magic_number", magic_number),
 	[0x4] = ATTRIBUTE(struct caniot_device_id, READABLE, "build_date", build_date),
 	[0x5] = ATTRIBUTE(struct caniot_device_id, READABLE, "build_commit", build_commit),
 	[0x6] = ATTRIBUTE(struct caniot_device_id, READABLE, "features", features),
 };
 
 static const struct attribute system_attr[] ROM = {
-	[0x0] = ATTRIBUTE(
-		struct caniot_device_system, READABLE, "uptime_synced", uptime_synced),
+	[0x0] =
+		ATTRIBUTE(struct caniot_device_system, READABLE, "uptime_synced", uptime_synced),
 	[0x1] = ATTRIBUTE(struct caniot_device_system, READABLE | WRITABLE, "time", time),
 	[0x2] = ATTRIBUTE(struct caniot_device_system, READABLE, "uptime", uptime),
-	[0x3] = ATTRIBUTE(
-		struct caniot_device_system, READABLE, "start_time", start_time),
+	[0x3] = ATTRIBUTE(struct caniot_device_system, READABLE, "start_time", start_time),
 	[0x4] = ATTRIBUTE(
 		struct caniot_device_system, READABLE, "last_telemetry", last_telemetry),
-	[0xB] = ATTRIBUTE(struct caniot_device_system,
-			  READABLE,
-			  "_last_telemetry_ms",
-			  _last_telemetry_ms),
+	[0xB] = ATTRIBUTE(
+		struct caniot_device_system, READABLE, "_last_telemetry_ms", _last_telemetry_ms),
 	[0x5] = ATTRIBUTE(
 		struct caniot_device_system, READABLE, "received.total", received.total),
 	[0x6] = ATTRIBUTE(struct caniot_device_system,
-			  READABLE,
-			  "received.read_attribute",
-			  received.read_attribute),
+					  READABLE,
+					  "received.read_attribute",
+					  received.read_attribute),
 	[0x7] = ATTRIBUTE(struct caniot_device_system,
-			  READABLE,
-			  "received.write_attribute",
-			  received.write_attribute),
-	[0x8] = ATTRIBUTE(struct caniot_device_system,
-			  READABLE,
-			  "received.command",
-			  received.command),
+					  READABLE,
+					  "received.write_attribute",
+					  received.write_attribute),
+	[0x8] = ATTRIBUTE(
+		struct caniot_device_system, READABLE, "received.command", received.command),
 	[0x9] = ATTRIBUTE(struct caniot_device_system,
-			  READABLE,
-			  "received.request_telemetry",
-			  received.request_telemetry),
-	[0xA] = ATTRIBUTE(struct caniot_device_system,
-			  HIDDEN,
-			  "received.ignored",
-			  received.ignored),
-	[0xC] = ATTRIBUTE(
-		struct caniot_device_system, READABLE, "sent.total", sent.total),
+					  READABLE,
+					  "received.request_telemetry",
+					  received.request_telemetry),
+	[0xA] = ATTRIBUTE(
+		struct caniot_device_system, HIDDEN, "received.ignored", received.ignored),
+	[0xC] = ATTRIBUTE(struct caniot_device_system, READABLE, "sent.total", sent.total),
 	[0xD] = ATTRIBUTE(
 		struct caniot_device_system, READABLE, "sent.telemetry", sent.telemetry),
-	[0xE]  = ATTRIBUTE(struct caniot_device_system, HIDDEN, "", _unused4),
-	[0xF]  = ATTRIBUTE(struct caniot_device_system,
-			   READABLE,
-			   "last_command_error",
-			   last_command_error),
+	[0xE] = ATTRIBUTE(struct caniot_device_system, HIDDEN, "", _unused4),
+	[0xF] = ATTRIBUTE(
+		struct caniot_device_system, READABLE, "last_command_error", last_command_error),
 	[0x10] = ATTRIBUTE(struct caniot_device_system,
-			   READABLE,
-			   "last_telemetry_error",
-			   last_telemetry_error),
+					   READABLE,
+					   "last_telemetry_error",
+					   last_telemetry_error),
 	[0x11] = ATTRIBUTE(struct caniot_device_system, HIDDEN, "", _unused5),
 	[0x12] = ATTRIBUTE(struct caniot_device_system, READABLE, "battery", battery),
 };
 
 static const struct attribute config_attr[] ROM = {
 	[0x0] = ATTRIBUTE(struct caniot_device_config,
-			  READABLE | WRITABLE,
-			  "telemetry.period",
-			  telemetry.period), /* ms */
+					  READABLE | WRITABLE,
+					  "telemetry.period",
+					  telemetry.period), /* ms */
 	[0x1] = ATTRIBUTE(struct caniot_device_config,
-			  READABLE | WRITABLE,
-			  "telemetry.delay",
-			  telemetry.delay), /* ms */
+					  READABLE | WRITABLE,
+					  "telemetry.delay",
+					  telemetry.delay), /* ms */
 	[0x2] = ATTRIBUTE(struct caniot_device_config,
-			  READABLE | WRITABLE,
-			  "telemetry.delay_min",
-			  telemetry.delay_min), /* ms */
+					  READABLE | WRITABLE,
+					  "telemetry.delay_min",
+					  telemetry.delay_min), /* ms */
 	[0x3] = ATTRIBUTE(struct caniot_device_config,
-			  READABLE | WRITABLE,
-			  "telemetry.delay_max",
-			  telemetry.delay_max), /* ms */
-	[0x4] = ATTRIBUTE(
-		struct caniot_device_config, READABLE | WRITABLE, "flags", flags),
-	[0x5] = ATTRIBUTE(
-		struct caniot_device_config, READABLE | WRITABLE, "timezone", timezone),
-	[0x6] = ATTRIBUTE(
-		struct caniot_device_config, READABLE | WRITABLE, "location", location),
+					  READABLE | WRITABLE,
+					  "telemetry.delay_max",
+					  telemetry.delay_max), /* ms */
+	[0x4] = ATTRIBUTE(struct caniot_device_config, READABLE | WRITABLE, "flags", flags),
+	[0x5] =
+		ATTRIBUTE(struct caniot_device_config, READABLE | WRITABLE, "timezone", timezone),
+	[0x6] =
+		ATTRIBUTE(struct caniot_device_config, READABLE | WRITABLE, "location", location),
 
 	/* Class 0 */
 	[0x7] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.pulse_duration.oc1",
-			   cls0_gpio.pulse_durations[0u]),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.pulse_duration.oc1",
+					   cls0_gpio.pulse_durations[0u]),
 	[0x8] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.pulse_duration.oc2",
-			   cls0_gpio.pulse_durations[1u]),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.pulse_duration.oc2",
+					   cls0_gpio.pulse_durations[1u]),
 	[0x9] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.pulse_duration.rl1",
-			   cls0_gpio.pulse_durations[2u]),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.pulse_duration.rl1",
+					   cls0_gpio.pulse_durations[2u]),
 	[0xA] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.pulse_duration.rl2",
-			   cls0_gpio.pulse_durations[3u]),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.pulse_duration.rl2",
+					   cls0_gpio.pulse_durations[3u]),
 	[0xB] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.outputs_default",
-			   cls0_gpio.outputs_default),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.outputs_default",
+					   cls0_gpio.outputs_default),
 	[0xC] = CLASS_ATTR(struct caniot_device_config,
-			   READABLE | WRITABLE,
-			   ATTR_CLASS0,
-			   "cls0_gpio.mask.telemetry_on_change",
-			   cls0_gpio.telemetry_on_change),
+					   READABLE | WRITABLE,
+					   ATTR_CLASS0,
+					   "cls0_gpio.mask.telemetry_on_change",
+					   cls0_gpio.telemetry_on_change),
 
 	/* Class 1 */
 	[0xD]  = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pc0",
-			    cls1_gpio.pulse_durations[0u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pc0",
+						cls1_gpio.pulse_durations[0u]),
 	[0xE]  = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pc1",
-			    cls1_gpio.pulse_durations[1u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pc1",
+						cls1_gpio.pulse_durations[1u]),
 	[0xF]  = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pc2",
-			    cls1_gpio.pulse_durations[2u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pc2",
+						cls1_gpio.pulse_durations[2u]),
 	[0x10] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pc3",
-			    cls1_gpio.pulse_durations[3u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pc3",
+						cls1_gpio.pulse_durations[3u]),
 	[0x11] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pd0",
-			    cls1_gpio.pulse_durations[4u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pd0",
+						cls1_gpio.pulse_durations[4u]),
 	[0x12] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pd1",
-			    cls1_gpio.pulse_durations[5u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pd1",
+						cls1_gpio.pulse_durations[5u]),
 	[0x13] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pd2",
-			    cls1_gpio.pulse_durations[6u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pd2",
+						cls1_gpio.pulse_durations[6u]),
 	[0x14] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pd3",
-			    cls1_gpio.pulse_durations[7u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pd3",
+						cls1_gpio.pulse_durations[7u]),
 	[0x15] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei0",
-			    cls1_gpio.pulse_durations[8u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei0",
+						cls1_gpio.pulse_durations[8u]),
 	[0x16] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei1",
-			    cls1_gpio.pulse_durations[9u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei1",
+						cls1_gpio.pulse_durations[9u]),
 	[0x17] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei2",
-			    cls1_gpio.pulse_durations[10u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei2",
+						cls1_gpio.pulse_durations[10u]),
 	[0x18] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei3",
-			    cls1_gpio.pulse_durations[11u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei3",
+						cls1_gpio.pulse_durations[11u]),
 	[0x19] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei4",
-			    cls1_gpio.pulse_durations[12u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei4",
+						cls1_gpio.pulse_durations[12u]),
 	[0x1A] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei5",
-			    cls1_gpio.pulse_durations[13u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei5",
+						cls1_gpio.pulse_durations[13u]),
 	[0x1B] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei6",
-			    cls1_gpio.pulse_durations[14u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei6",
+						cls1_gpio.pulse_durations[14u]),
 	[0x1C] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pei7",
-			    cls1_gpio.pulse_durations[15u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pei7",
+						cls1_gpio.pulse_durations[15u]),
 	[0x1D] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pb0",
-			    cls1_gpio.pulse_durations[16u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pb0",
+						cls1_gpio.pulse_durations[16u]),
 	[0x1E] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pe0",
-			    cls1_gpio.pulse_durations[17u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pe0",
+						cls1_gpio.pulse_durations[17u]),
 	[0x1F] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration.pe1",
-			    cls1_gpio.pulse_durations[18u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration.pe1",
+						cls1_gpio.pulse_durations[18u]),
 	[0x20] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.pulse_duration._reserved",
-			    cls1_gpio.pulse_durations[19u]),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.pulse_duration._reserved",
+						cls1_gpio.pulse_durations[19u]),
 	[0x21] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.directions",
-			    cls1_gpio.directions),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.directions",
+						cls1_gpio.directions),
 	[0x22] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.outputs_default",
-			    cls1_gpio.outputs_default),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.outputs_default",
+						cls1_gpio.outputs_default),
 	[0x23] = CLASS_ATTR(struct caniot_device_config,
-			    READABLE | WRITABLE,
-			    ATTR_CLASS1,
-			    "cls1_gpio.mask.telemetry_on_change",
-			    cls1_gpio.telemetry_on_change),
+						READABLE | WRITABLE,
+						ATTR_CLASS1,
+						"cls1_gpio.mask.telemetry_on_change",
+						cls1_gpio.telemetry_on_change),
 };
 
 static const struct attr_section attr_sections[] ROM = {
@@ -510,7 +497,7 @@ static const struct attr_section *attr_get_section(attr_key_t key)
 }
 
 static const struct attribute *attr_get(attr_key_t key,
-					const struct attr_section *section)
+										const struct attr_section *section)
 {
 	uint8_t index = ATTR_KEY_ATTR_GET(key);
 	if (index < attr_get_section_size(section)) {
@@ -540,10 +527,10 @@ static int attr_resolve(attr_key_t key, struct attr_ref *ref)
 		return -CANIOT_EKEYPART;
 	}
 
-	ref->section	    = ATTR_KEY_SECTION_GET(key);
-	ref->size	    = MIN(attr_size, 4u);
-	ref->offset	    = ATTR_KEY_DATA_BYTE_OFFSET(key) + attr_get_offset(attr);
-	ref->option	    = attr_get_option(attr);
+	ref->section		= ATTR_KEY_SECTION_GET(key);
+	ref->size			= MIN(attr_size, 4u);
+	ref->offset			= ATTR_KEY_DATA_BYTE_OFFSET(key) + attr_get_offset(attr);
+	ref->option			= attr_get_option(attr);
 	ref->section_option = attr_get_section_option(section);
 
 	/* adjust attribute options in function of uppermost section options */
@@ -553,14 +540,14 @@ static int attr_resolve(attr_key_t key, struct attr_ref *ref)
 }
 
 static void read_identificate_attr(struct caniot_device *dev,
-				   const struct attr_ref *ref,
-				   struct caniot_attribute *attr)
+								   const struct attr_ref *ref,
+								   struct caniot_attribute *attr)
 {
 	arch_rom_cpy(&attr->val, (uint8_t *)dev->identification + ref->offset, ref->size);
 }
 
 static void read_rom_identification(struct caniot_device_id *d,
-				    const struct caniot_device_id *p)
+									const struct caniot_device_id *p)
 {
 	arch_rom_cpy_mem(d, p, sizeof(struct caniot_device_id));
 }
@@ -572,10 +559,10 @@ void caniot_print_device_identification(const struct caniot_device *dev)
 	read_rom_identification(&id, dev->identification);
 
 	CANIOT_INF(F("name    = %s\ncls/dev = %d/%d\nversion = %hhx\n"),
-		   id.name,
-		   CANIOT_DID_CLS(id.did),
-		   CANIOT_DID_SID(id.did),
-		   id.version);
+			   id.name,
+			   CANIOT_DID_CLS(id.did),
+			   CANIOT_DID_SID(id.did),
+			   id.version);
 
 	CANIOT_INF(F("commit  = "));
 	for (uint8_t i = 0u; i < 20u; i++) {
@@ -594,7 +581,7 @@ int caniot_device_system_reset(struct caniot_device *dev)
 }
 
 static inline void read_identification_nodeid(struct caniot_device *dev,
-					      caniot_did_t *did)
+											  caniot_did_t *did)
 {
 	arch_rom_cpy_byte(did, (const uint8_t *)&dev->identification->did);
 }
@@ -682,8 +669,8 @@ static int config_written(struct caniot_device *dev)
 }
 
 static int read_config_attr(struct caniot_device *dev,
-			    const struct attr_ref *ref,
-			    struct caniot_attribute *attr)
+							const struct attr_ref *ref,
+							struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ref != NULL);
@@ -700,8 +687,8 @@ static int read_config_attr(struct caniot_device *dev,
 }
 
 static int write_config_attr(struct caniot_device *dev,
-			     const struct attr_ref *ref,
-			     const struct caniot_attribute *attr)
+							 const struct attr_ref *ref,
+							 const struct caniot_attribute *attr)
 {
 	memcpy((uint8_t *)dev->config + ref->offset, &attr->val, ref->size);
 
@@ -709,7 +696,7 @@ static int write_config_attr(struct caniot_device *dev,
 }
 
 static bool device_class_attr_exists(struct caniot_device *dev,
-				     const struct attr_ref *ref)
+									 const struct attr_ref *ref)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ref != NULL);
@@ -723,13 +710,13 @@ static bool device_class_attr_exists(struct caniot_device *dev,
 		caniot_did_t did;
 		read_identification_nodeid(dev, &did);
 		return ((ref->option >> ATTR_OPTION_CLASS_POS) & ATTR_OPTION_CLASS_MSK) ==
-		       CANIOT_DID_CLS(did);
+			   CANIOT_DID_CLS(did);
 	}
 }
 
 static int attribute_read(struct caniot_device *dev,
-			  const struct attr_ref *ref,
-			  struct caniot_attribute *attr)
+						  const struct attr_ref *ref,
+						  struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ref != NULL);
@@ -739,9 +726,9 @@ static int attribute_read(struct caniot_device *dev,
 
 	/* print debug attr_ref */
 	CANIOT_DBG(F("attr_ref: section = %hhu, offset = %hhu, option = %hhu\n"),
-		   ref->section,
-		   ref->offset,
-		   ref->option);
+			   ref->section,
+			   ref->offset,
+			   ref->option);
 
 	if (!device_class_attr_exists(dev, ref)) {
 		return -CANIOT_ECLSATTR;
@@ -771,9 +758,9 @@ static int attribute_read(struct caniot_device *dev,
 }
 
 static void prepare_response(struct caniot_device *dev,
-			     struct caniot_frame *resp,
-			     caniot_frame_type_t resp_type,
-			     caniot_endpoint_t endpoint)
+							 struct caniot_frame *resp,
+							 caniot_frame_type_t resp_type,
+							 caniot_endpoint_t endpoint)
 {
 	ASSERT(dev != NULL);
 	ASSERT(resp != NULL);
@@ -794,10 +781,10 @@ static void prepare_response(struct caniot_device *dev,
 }
 
 static void resp_wrap_error(struct caniot_device *dev,
-			    struct caniot_frame *resp,
-			    const struct caniot_frame *req,
-			    int error_code,
-			    uint32_t *p_error_arg)
+							struct caniot_frame *resp,
+							const struct caniot_frame *req,
+							int error_code,
+							uint32_t *p_error_arg)
 {
 	ASSERT(resp != NULL);
 
@@ -806,23 +793,22 @@ static void resp_wrap_error(struct caniot_device *dev,
 
 	 * otherwise (if it's an attribute error), error frame is RESPONSE/WRITE_ATTR
 	 */
-	prepare_response(
-		dev, resp, caniot_resp_error_for(req->id.type), req->id.endpoint);
+	prepare_response(dev, resp, caniot_resp_error_for(req->id.type), req->id.endpoint);
 
 	resp->err.code = (int32_t)error_code;
 
 	/* Encode the error argument if provided */
 	if (p_error_arg != NULL) {
 		resp->err.arg = *p_error_arg;
-		resp->len     = 8u;
+		resp->len	  = 8u;
 	} else {
 		resp->len = 4u;
 	}
 }
 
 static int handle_read_attribute(struct caniot_device *dev,
-				 struct caniot_frame *resp,
-				 const struct caniot_attribute *attr)
+								 struct caniot_frame *resp,
+								 const struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(resp != NULL);
@@ -833,8 +819,7 @@ static int handle_read_attribute(struct caniot_device *dev,
 
 	CANIOT_DBG(F("Executing read attribute key = 0x%x\n"), attr->key);
 
-	prepare_response(
-		dev, resp, CANIOT_FRAME_TYPE_READ_ATTRIBUTE, CANIOT_ENDPOINT_APP);
+	prepare_response(dev, resp, CANIOT_FRAME_TYPE_READ_ATTRIBUTE, CANIOT_ENDPOINT_APP);
 
 	ret = attr_resolve(attr->key, &ref);
 
@@ -845,7 +830,7 @@ static int handle_read_attribute(struct caniot_device *dev,
 		if (dev->api->custom_attr.read != NULL) {
 			/* temp variable to avoid `-Waddress-of-packed-member` warning */
 			uint32_t tval = (uint32_t)-1;
-			ret	      = dev->api->custom_attr.read(dev, attr->key, &tval);
+			ret			  = dev->api->custom_attr.read(dev, attr->key, &tval);
 			if (ret == 0) {
 				resp->attr.val = tval;
 			}
@@ -856,7 +841,7 @@ static int handle_read_attribute(struct caniot_device *dev,
 
 	/* finalize response */
 	if (ret == 0) {
-		resp->len      = 6u;
+		resp->len	   = 6u;
 		resp->attr.key = attr->key;
 	}
 
@@ -864,8 +849,8 @@ static int handle_read_attribute(struct caniot_device *dev,
 }
 
 static int write_system_attr(struct caniot_device *dev,
-			     const struct attr_ref *ref,
-			     const struct caniot_attribute *attr)
+							 const struct attr_ref *ref,
+							 const struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ref != NULL);
@@ -907,8 +892,8 @@ static int write_system_attr(struct caniot_device *dev,
 }
 
 static int attribute_write(struct caniot_device *dev,
-			   const struct attr_ref *ref,
-			   const struct caniot_attribute *attr)
+						   const struct attr_ref *ref,
+						   const struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ref != NULL);
@@ -922,9 +907,9 @@ static int attribute_write(struct caniot_device *dev,
 
 	/* print debug attr_ref */
 	CANIOT_DBG(F("attr_ref: section = %hhu, offset = %hhu, option = %hhu\n"),
-		   ref->section,
-		   ref->offset,
-		   ref->option);
+			   ref->section,
+			   ref->offset,
+			   ref->option);
 
 	switch (ref->section) {
 	case CANIOT_SECTION_DEVICE_SYSTEM: {
@@ -944,8 +929,8 @@ static int attribute_write(struct caniot_device *dev,
 }
 
 static int handle_write_attribute(struct caniot_device *dev,
-				  const struct caniot_frame *req,
-				  const struct caniot_attribute *attr)
+								  const struct caniot_frame *req,
+								  const struct caniot_attribute *attr)
 {
 	ASSERT(dev != NULL);
 	ASSERT(req != NULL);
@@ -979,8 +964,8 @@ static int handle_command_req(struct caniot_device *dev, const struct caniot_fra
 	const caniot_endpoint_t ep = req->id.endpoint;
 
 	CANIOT_DBG(F("Executing command handler (0x%p) for endpoint %d\n"),
-		   (void *)&dev->api->command_handler,
-		   ep);
+			   (void *)&dev->api->command_handler,
+			   ep);
 
 	if (dev->api->command_handler != NULL) {
 		ret = dev->api->command_handler(dev, ep, req->buf, req->len);
@@ -994,8 +979,8 @@ static int handle_command_req(struct caniot_device *dev, const struct caniot_fra
 }
 
 static int build_telemetry_resp(struct caniot_device *dev,
-				struct caniot_frame *resp,
-				caniot_endpoint_t ep)
+								struct caniot_frame *resp,
+								caniot_endpoint_t ep)
 {
 	ASSERT(dev != NULL);
 	ASSERT(resp != NULL);
@@ -1011,8 +996,8 @@ static int build_telemetry_resp(struct caniot_device *dev,
 	}
 
 	CANIOT_DBG(F("Executing telemetry handler (0x%p) for endpoint %d\n"),
-		   (void *)&dev->api->telemetry_handler,
-		   ep);
+			   (void *)&dev->api->telemetry_handler,
+			   ep);
 
 	/* buffer */
 	ret = dev->api->telemetry_handler(dev, ep, resp->buf, &resp->len);
@@ -1028,8 +1013,8 @@ static int build_telemetry_resp(struct caniot_device *dev,
 }
 
 int caniot_device_handle_rx_frame(struct caniot_device *dev,
-				  const struct caniot_frame *req,
-				  struct caniot_frame *resp)
+								  const struct caniot_frame *req,
+								  struct caniot_frame *resp)
 {
 	ASSERT(dev != NULL);
 	ASSERT(req != NULL);
@@ -1127,11 +1112,11 @@ uint32_t caniot_device_telemetry_remaining(struct caniot_device *dev)
 		const uint32_t now_ms	   = sec * 1000 + msec;
 		const uint32_t ellapsed_ms = now_ms - dev->system._last_telemetry_ms;
 		CANIOT_DBG(F("now: %u _last_telemetry_ms: %u since last: %u < period: %u "
-			     "? (* ms)\n"),
-			   (FMT_UINT_CAST)now_ms,
-			   (FMT_UINT_CAST)dev->system._last_telemetry_ms,
-			   (FMT_UINT_CAST)ellapsed_ms,
-			   (FMT_UINT_CAST)dev->config->telemetry.period);
+					 "? (* ms)\n"),
+				   (FMT_UINT_CAST)now_ms,
+				   (FMT_UINT_CAST)dev->system._last_telemetry_ms,
+				   (FMT_UINT_CAST)ellapsed_ms,
+				   (FMT_UINT_CAST)dev->config->telemetry.period);
 
 		if (dev->config->telemetry.period <= ellapsed_ms) {
 			remaining = 0u;
@@ -1208,7 +1193,7 @@ bool caniot_device_triggered_telemetry_any(struct caniot_device *dev)
 }
 
 static inline void telemetry_trig_clear_ep(struct caniot_device *dev,
-					   caniot_endpoint_t ep)
+										   caniot_endpoint_t ep)
 {
 	ASSERT(dev != NULL);
 	ASSERT(ep <= CANIOT_ENDPOINT_BOARD_CONTROL);
@@ -1235,20 +1220,20 @@ int caniot_device_process(struct caniot_device *dev)
 		dev->system.uptime = dev->system.time - dev->system.start_time;
 
 		/* check if we need to send telemetry (calculated in seconds) */
-		now_ms			   = dev->system.time * 1000 + msec;
+		now_ms					   = dev->system.time * 1000 + msec;
 		const uint32_t ellapsed_ms = now_ms - dev->system._last_telemetry_ms;
 
 		CANIOT_DBG(F("now: %u _last_telemetry_ms: %u ellapsed_ms: %u >= period: "
-			     "%u ? (* "
-			     "ms)\n"),
-			   (FMT_UINT_CAST)now_ms,
-			   (FMT_UINT_CAST)dev->system._last_telemetry_ms,
-			   (FMT_UINT_CAST)ellapsed_ms,
-			   (FMT_UINT_CAST)dev->config->telemetry.period);
+					 "%u ? (* "
+					 "ms)\n"),
+				   (FMT_UINT_CAST)now_ms,
+				   (FMT_UINT_CAST)dev->system._last_telemetry_ms,
+				   (FMT_UINT_CAST)ellapsed_ms,
+				   (FMT_UINT_CAST)dev->config->telemetry.period);
 
 		if (ellapsed_ms >= dev->config->telemetry.period) {
-			caniot_device_trigger_telemetry_ep(
-				dev, dev->config->flags.telemetry_endpoint);
+			caniot_device_trigger_telemetry_ep(dev,
+											   dev->config->flags.telemetry_endpoint);
 
 			CANIOT_DBG(F("Requesting telemetry\n"));
 		}
@@ -1278,16 +1263,14 @@ int caniot_device_process(struct caniot_device *dev)
 			random_delay = true;
 		}
 
-	} else if ((ret == -CANIOT_EAGAIN) &&
-		   caniot_device_triggered_telemetry_any(dev)) {
+	} else if ((ret == -CANIOT_EAGAIN) && caniot_device_triggered_telemetry_any(dev)) {
 		/* if we didn't received a frame but telemetry is requested */
 
 		/* Iterate over all endpoints then prepare the telemetry frame for the
 		 * first found. In the case of multiple endpoints requesting telemetry,
 		 * "board control" has the highest priority.
 		 */
-		for (int8_t ep = CANIOT_ENDPOINT_BOARD_CONTROL; ep >= CANIOT_ENDPOINT_APP;
-		     ep--) {
+		for (int8_t ep = CANIOT_ENDPOINT_BOARD_CONTROL; ep >= CANIOT_ENDPOINT_APP; ep--) {
 			if (caniot_device_triggered_telemetry_ep(dev, ep) == true) {
 				ret = build_telemetry_resp(dev, &resp, ep);
 				break;
@@ -1321,9 +1304,9 @@ int caniot_device_process(struct caniot_device *dev)
 			 * update the last telemetry timestamp.
 			 */
 			if (dev->config->flags.telemetry_periodic_enabled &&
-			    resp.id.endpoint == dev->config->flags.telemetry_endpoint) {
+				resp.id.endpoint == dev->config->flags.telemetry_endpoint) {
 				dev->system._last_telemetry_ms = now_ms;
-				dev->system.last_telemetry     = dev->system.time;
+				dev->system.last_telemetry	   = dev->system.time;
 			}
 		}
 	}
@@ -1342,7 +1325,7 @@ void caniot_app_init(struct caniot_device *dev)
 
 	dev->driv->get_time(&dev->system.start_time, NULL);
 
-	dev->flags.initialized		= 1u;
+	dev->flags.initialized			= 1u;
 	dev->flags.request_telemetry_ep = 0u;
 }
 
@@ -1350,23 +1333,23 @@ void caniot_app_deinit(struct caniot_device *dev)
 {
 	ASSERT(dev != NULL);
 
-	dev->flags.initialized		= 0u;
+	dev->flags.initialized			= 0u;
 	dev->flags.request_telemetry_ep = 0u;
 }
 
 #endif /* CONFIG_CANIOT_DEVICE_DRIVERS_API */
 
 static void attribute_copy_from_ref(struct caniot_device_attribute *attr,
-				    struct attr_ref *ref)
+									struct attr_ref *ref)
 {
-	attr->read	 = ref->option & READABLE ? 1u : 0u;
-	attr->write	 = ref->option & WRITABLE ? 1u : 0u;
+	attr->read		 = ref->option & READABLE ? 1u : 0u;
+	attr->write		 = ref->option & WRITABLE ? 1u : 0u;
 	attr->persistent = ref->section_option & PERSISTENT ? 1u : 0u;
 	attr->section	 = ref->section;
 }
 
 static void attribute_copy_name_from_key(struct caniot_device_attribute *attr,
-					 uint16_t key)
+										 uint16_t key)
 {
 #if CONFIG_CANIOT_ATTRIBUTE_NAME
 	const struct attr_section *section = attr_get_section(key);
@@ -1448,16 +1431,16 @@ bool caniot_device_targeted(caniot_did_t did, bool ext, bool rtr, uint32_t id)
 	if (!ext) {
 		const uint16_t std_id = id & 0x7FFu; /* CAN standard ID mask (11 bits) */
 
-		const uint16_t mask	  = caniot_device_get_mask();
+		const uint16_t mask		  = caniot_device_get_mask();
 		const uint16_t dev_filt	  = caniot_device_get_filter(did);
 		const uint16_t broad_filt = caniot_device_get_filter_broadcast(did);
 
 		CANIOT_DBG(F("mask: 0x%04X, dev_filt: 0x%04X, broad_filt: 0x%04X, "
-			     "std_id: 0x%04X\n"),
-			   mask,
-			   dev_filt,
-			   broad_filt,
-			   std_id);
+					 "std_id: 0x%04X\n"),
+				   mask,
+				   dev_filt,
+				   broad_filt,
+				   std_id);
 
 		if ((std_id & mask) == dev_filt) {
 			targeted = true;
diff --git a/tests/test.c b/tests/test.c
index bb238f8..b87f7b6 100644
--- a/tests/test.c
+++ b/tests/test.c
@@ -21,30 +21,30 @@
 #define FALSE false
 
 #define TEST_ASSERT(statement)                                                           \
-	if (!(statement)) {                                                              \
-		printf("%s:%d: %s: Assertion `%s' failed.\n",                            \
-		       __FILE__,                                                         \
-		       __LINE__,                                                         \
-		       __func__,                                                         \
-		       #statement);                                                      \
-		exit(EXIT_FAILURE);                                                      \
+	if (!(statement)) {                                                                  \
+		printf("%s:%d: %s: Assertion `%s' failed.\n",                                    \
+			   __FILE__,                                                                 \
+			   __LINE__,                                                                 \
+			   __func__,                                                                 \
+			   #statement);                                                              \
+		exit(EXIT_FAILURE);                                                              \
 	}
 
 #define CHECK(statement)                                                                 \
-	if ((statement) == false) {                                                      \
-		return false;                                                            \
+	if ((statement) == false) {                                                          \
+		return false;                                                                    \
 	}
 #define CHECK_0(statement)                                                               \
-	if ((statement) != 0) {                                                          \
-		return false;                                                            \
+	if ((statement) != 0) {                                                              \
+		return false;                                                                    \
 	}
 #define CHECK_POSITIVE(statement)                                                        \
-	if ((statement) < 0) {                                                           \
-		return false;                                                            \
+	if ((statement) < 0) {                                                               \
+		return false;                                                                    \
 	}
 #define CHECK_STRICTLY_POSITIVE(statement)                                               \
-	if ((statement) <= 0) {                                                          \
-		return false;                                                            \
+	if ((statement) <= 0) {                                                              \
+		return false;                                                                    \
 	}
 
 void __assert(bool statement)
@@ -101,8 +101,7 @@ bool z_macro__CANIOT_DID(void)
 
 bool z_macro__CANIOT_DEVICE_IS_BROADCAST(void)
 {
-	const caniot_did_t did =
-		CANIOT_DID(CANIOT_CLASS_BROADCAST, CANIOT_SUBID_BROADCAST);
+	const caniot_did_t did = CANIOT_DID(CANIOT_CLASS_BROADCAST, CANIOT_SUBID_BROADCAST);
 
 	return CANIOT_DID_EQ(did, CANIOT_DID_BROADCAST);
 }
@@ -122,10 +121,10 @@ bool z_macro__CANIOT_ID(void)
 	uint16_t canid = CANIOT_ID(id.type, id.query, id.cls, id.sid, id.endpoint);
 
 	return (CANIOT_ID_GET_TYPE(canid) == id.type) &&
-	       (CANIOT_ID_GET_QUERY(canid) == id.query) &&
-	       (CANIOT_ID_GET_CLASS(canid) == id.cls) &&
-	       (CANIOT_ID_GET_SUBID(canid) == id.sid) &&
-	       (CANIOT_ID_GET_ENDPOINT(canid) == id.endpoint);
+		   (CANIOT_ID_GET_QUERY(canid) == id.query) &&
+		   (CANIOT_ID_GET_CLASS(canid) == id.cls) &&
+		   (CANIOT_ID_GET_SUBID(canid) == id.sid) &&
+		   (CANIOT_ID_GET_ENDPOINT(canid) == id.endpoint);
 }
 
 bool z_func__caniot_id_to_canid(void)
@@ -133,16 +132,16 @@ bool z_func__caniot_id_to_canid(void)
 	const caniot_id_t id = gen_rdm_id();
 
 	return caniot_id_to_canid(id) ==
-	       CANIOT_ID(id.type, id.query, id.cls, id.sid, id.endpoint);
+		   CANIOT_ID(id.type, id.query, id.cls, id.sid, id.endpoint);
 }
 
 bool z_struct__caniot_id_t(void)
 {
 	const caniot_id_t id = {.type	  = CANIOT_FRAME_TYPE_READ_ATTRIBUTE,
-				.query	  = CANIOT_RESPONSE,
-				.cls	  = CANIOT_CLASS_BROADCAST,
-				.sid	  = CANIOT_SUBID_BROADCAST,
-				.endpoint = CANIOT_ENDPOINT_BOARD_CONTROL};
+							.query	  = CANIOT_RESPONSE,
+							.cls	  = CANIOT_CLASS_BROADCAST,
+							.sid	  = CANIOT_SUBID_BROADCAST,
+							.endpoint = CANIOT_ENDPOINT_BOARD_CONTROL};
 
 	uint16_t canid = caniot_id_to_canid(id);
 
@@ -158,7 +157,7 @@ bool z_misc_id_conversion(void)
 	const caniot_id_t id2 = caniot_canid_to_id(canid);
 
 	return (id.type == id2.type) && (id.query == id2.query) && (id.cls == id2.cls) &&
-	       (id.sid == id2.sid) && (id.endpoint == id2.endpoint);
+		   (id.sid == id2.sid) && (id.endpoint == id2.endpoint);
 }
 
 static caniot_did_t gen_rdm_did(bool including_broadcast)
@@ -197,32 +196,28 @@ bool z_func__caniot_device_is_target(void)
 	};
 
 	return caniot_device_is_target(did, &fordev) &&
-	       !caniot_device_is_target(did, &notfordev);
+		   !caniot_device_is_target(did, &notfordev);
 }
 
 bool z_func__caniot_resp_error_for(void)
 {
 	bool all = true;
 
-	all &= caniot_resp_error_for(CANIOT_FRAME_TYPE_TELEMETRY) ==
-	       CANIOT_FRAME_TYPE_COMMAND;
-	all &= caniot_resp_error_for(CANIOT_FRAME_TYPE_COMMAND) ==
-	       CANIOT_FRAME_TYPE_COMMAND;
+	all &=
+		caniot_resp_error_for(CANIOT_FRAME_TYPE_TELEMETRY) == CANIOT_FRAME_TYPE_COMMAND;
+	all &= caniot_resp_error_for(CANIOT_FRAME_TYPE_COMMAND) == CANIOT_FRAME_TYPE_COMMAND;
 	all &= caniot_resp_error_for(CANIOT_FRAME_TYPE_READ_ATTRIBUTE) ==
-	       CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE;
+		   CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE;
 	all &= caniot_resp_error_for(CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE) ==
-	       CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE;
+		   CANIOT_FRAME_TYPE_WRITE_ATTRIBUTE;
 
 	return all;
 }
 
 bool z_func__caniot_validate_drivers_api(void)
 {
-	struct caniot_drivers_api api = {.entropy  = NULL,
-					 .get_time = NULL,
-					 .recv	   = NULL,
-					 .send	   = NULL,
-					 .set_time = NULL};
+	struct caniot_drivers_api api = {
+		.entropy = NULL, .get_time = NULL, .recv = NULL, .send = NULL, .set_time = NULL};
 
 	return caniot_validate_drivers_api(&api) == false;
 }
@@ -233,8 +228,8 @@ bool z_func__caniot_device_get_filter(void)
 	const uint16_t filter  = caniot_device_get_filter(did);
 
 	return (CANIOT_ID_GET_CLASS(filter) == CANIOT_DID_CLS(did)) &&
-	       (CANIOT_ID_GET_SUBID(filter) == CANIOT_DID_SID(did)) &&
-	       (CANIOT_ID_GET_QUERY(filter) == CANIOT_QUERY);
+		   (CANIOT_ID_GET_SUBID(filter) == CANIOT_DID_SID(did)) &&
+		   (CANIOT_ID_GET_QUERY(filter) == CANIOT_QUERY);
 }
 
 bool z_func__caniot_device_get_mask(void)
@@ -251,8 +246,8 @@ bool z_func__caniot_device_get_filter_broadcast(void)
 	const uint16_t filter = caniot_device_get_filter_broadcast(did);
 
 	return (CANIOT_ID_GET_CLASS(filter) == CANIOT_CLASS_BROADCAST) &&
-	       (CANIOT_ID_GET_SUBID(filter) == CANIOT_SUBID_BROADCAST) &&
-	       (CANIOT_ID_GET_QUERY(filter) == CANIOT_QUERY);
+		   (CANIOT_ID_GET_SUBID(filter) == CANIOT_SUBID_BROADCAST) &&
+		   (CANIOT_ID_GET_QUERY(filter) == CANIOT_QUERY);
 }
 
 bool z_func___si_caniot_device_get_filter(void)
@@ -267,7 +262,7 @@ bool z_func___si_caniot_device_get_filter_broadcast(void)
 	const caniot_did_t did = gen_rdm_did(false);
 
 	return _si_caniot_device_get_filter_broadcast(did) ==
-	       caniot_device_get_filter_broadcast(did);
+		   caniot_device_get_filter_broadcast(did);
 }
 
 /*____________________________________________________________________________*/
@@ -313,7 +308,7 @@ static bool z_func_ctrl_cb(const caniot_controller_event_t *ev, void *user_data)
 		all &= ev->handle == x->handle;
 	all &= CANIOT_DID_EQ(ev->did, x->did);
 
-	x->success    = all;
+	x->success	  = all;
 	x->terminated = true;
 
 	return true;
@@ -322,31 +317,29 @@ static bool z_func_ctrl_cb(const caniot_controller_event_t *ev, void *user_data)
 /* Check timeout in controller callback */
 bool z_func_ctrl1(void)
 {
-	struct z_func_ctrl_test_ctx x = {
-		.did	 = gen_rdm_did(false),
-		.success = false,
-		.desired = {
-			.active	 = true,
-			.context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		}};
+	struct z_func_ctrl_test_ctx x = {.did	  = gen_rdm_did(false),
+									 .success = false,
+									 .desired = {
+										 .active  = true,
+										 .context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+									 }};
 
 	x.desired.status   = CANIOT_CONTROLLER_EVENT_STATUS_TIMEOUT;
 	x.desired.resp_set = false;
 
 	CHECK_0(caniot_controller_init(&x.ctrl, z_func_ctrl_cb, &x));
 	caniot_build_query_telemetry(&x.req, CANIOT_ENDPOINT_BOARD_CONTROL);
-	CHECK_STRICTLY_POSITIVE(x.handle = caniot_controller_query_register(
-					&x.ctrl, x.did, &x.req, 1000U));
+	CHECK_STRICTLY_POSITIVE(
+		x.handle = caniot_controller_query_register(&x.ctrl, x.did, &x.req, 1000U));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == true);
 	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
+		  CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
 
 	CHECK_0(caniot_controller_rx_frame(&x.ctrl, 1000U, NULL));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == false);
 	CHECK(x.ctrl.pendingq.pending_devices_bf == 0U);
 	CHECK(x.ctrl.pendingq.timeout_queue == NULL);
-	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES);
+	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) == CONFIG_CANIOT_MAX_PENDING_QUERIES);
 
 	return x.success == true;
 }
@@ -354,24 +347,23 @@ bool z_func_ctrl1(void)
 /* Check OK in controller callback */
 bool z_func_ctrl2(void)
 {
-	struct z_func_ctrl_test_ctx x = {
-		.did	 = gen_rdm_did(false),
-		.success = false,
-		.desired = {
-			.active	 = true,
-			.context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		}};
+	struct z_func_ctrl_test_ctx x = {.did	  = gen_rdm_did(false),
+									 .success = false,
+									 .desired = {
+										 .active  = true,
+										 .context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+									 }};
 
 	x.desired.status   = CANIOT_CONTROLLER_EVENT_STATUS_OK;
 	x.desired.resp_set = true;
 
 	CHECK_0(caniot_controller_init(&x.ctrl, z_func_ctrl_cb, &x));
 	caniot_build_query_telemetry(&x.req, CANIOT_ENDPOINT_BOARD_CONTROL);
-	CHECK_STRICTLY_POSITIVE(x.handle = caniot_controller_query_register(
-					&x.ctrl, x.did, &x.req, 1000U));
+	CHECK_STRICTLY_POSITIVE(
+		x.handle = caniot_controller_query_register(&x.ctrl, x.did, &x.req, 1000U));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == true);
 	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
+		  CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
 
 	memcpy(&x.resp, &x.req, sizeof(x.req));
 	x.resp.id.query = CANIOT_RESPONSE;
@@ -380,8 +372,7 @@ bool z_func_ctrl2(void)
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == false);
 	CHECK(x.ctrl.pendingq.pending_devices_bf == 0U);
 	CHECK(x.ctrl.pendingq.timeout_queue == NULL);
-	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES);
+	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) == CONFIG_CANIOT_MAX_PENDING_QUERIES);
 
 	return x.success == true;
 }
@@ -389,24 +380,23 @@ bool z_func_ctrl2(void)
 /* Check status error in controller callback */
 bool z_func_ctrl3(void)
 {
-	struct z_func_ctrl_test_ctx x = {
-		.did	 = gen_rdm_did(false),
-		.success = false,
-		.desired = {
-			.active	 = true,
-			.context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		}};
+	struct z_func_ctrl_test_ctx x = {.did	  = gen_rdm_did(false),
+									 .success = false,
+									 .desired = {
+										 .active  = true,
+										 .context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+									 }};
 
 	x.desired.status   = CANIOT_CONTROLLER_EVENT_STATUS_ERROR;
 	x.desired.resp_set = true;
 
 	CHECK_0(caniot_controller_init(&x.ctrl, z_func_ctrl_cb, &x));
 	caniot_build_query_telemetry(&x.req, CANIOT_ENDPOINT_BOARD_CONTROL);
-	CHECK_STRICTLY_POSITIVE(x.handle = caniot_controller_query_register(
-					&x.ctrl, x.did, &x.req, 1000U));
+	CHECK_STRICTLY_POSITIVE(
+		x.handle = caniot_controller_query_register(&x.ctrl, x.did, &x.req, 1000U));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == true);
 	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
+		  CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
 
 	memcpy(&x.resp, &x.req, sizeof(x.req));
 	x.resp.id.query = CANIOT_RESPONSE;
@@ -418,8 +408,7 @@ bool z_func_ctrl3(void)
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == false);
 	CHECK(x.ctrl.pendingq.pending_devices_bf == 0U);
 	CHECK(x.ctrl.pendingq.timeout_queue == NULL);
-	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES);
+	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) == CONFIG_CANIOT_MAX_PENDING_QUERIES);
 
 	return x.success == true;
 }
@@ -427,32 +416,30 @@ bool z_func_ctrl3(void)
 /* Check status cancelled in controller callback */
 bool z_func_ctrl4(void)
 {
-	struct z_func_ctrl_test_ctx x = {
-		.did	 = gen_rdm_did(false),
-		.success = false,
-		.desired = {
-			.active	 = true,
-			.context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
-		}};
+	struct z_func_ctrl_test_ctx x = {.did	  = gen_rdm_did(false),
+									 .success = false,
+									 .desired = {
+										 .active  = true,
+										 .context = CANIOT_CONTROLLER_EVENT_CONTEXT_QUERY,
+									 }};
 
 	x.desired.status   = CANIOT_CONTROLLER_EVENT_STATUS_CANCELLED;
 	x.desired.resp_set = false;
 
 	CHECK_0(caniot_controller_init(&x.ctrl, z_func_ctrl_cb, &x));
 	caniot_build_query_telemetry(&x.req, CANIOT_ENDPOINT_BOARD_CONTROL);
-	CHECK_STRICTLY_POSITIVE(x.handle = caniot_controller_query_register(
-					&x.ctrl, x.did, &x.req, 1000U));
+	CHECK_STRICTLY_POSITIVE(
+		x.handle = caniot_controller_query_register(&x.ctrl, x.did, &x.req, 1000U));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == true);
 	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
+		  CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
 
 	CHECK_0(caniot_controller_query_cancel(&x.ctrl, x.handle, false));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == false);
 	CHECK_0(caniot_controller_rx_frame(&x.ctrl, 1000U, NULL));
 	CHECK(x.ctrl.pendingq.pending_devices_bf == 0U);
 	CHECK(x.ctrl.pendingq.timeout_queue == NULL);
-	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES);
+	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) == CONFIG_CANIOT_MAX_PENDING_QUERIES);
 
 	return x.success == true;
 }
@@ -472,11 +459,11 @@ bool z_func_dev0(void)
 
 	CHECK_0(caniot_controller_init(&x.ctrl, z_func_ctrl_cb, &x));
 	caniot_build_query_telemetry(&x.req, CANIOT_ENDPOINT_BOARD_CONTROL);
-	CHECK_STRICTLY_POSITIVE(x.handle = caniot_controller_query_register(
-					&x.ctrl, x.did, &x.req, 1000U));
+	CHECK_STRICTLY_POSITIVE(
+		x.handle = caniot_controller_query_register(&x.ctrl, x.did, &x.req, 1000U));
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == true);
 	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
+		  CONFIG_CANIOT_MAX_PENDING_QUERIES - 1U);
 
 	memcpy(&x.resp, &x.req, sizeof(x.req));
 	x.resp.id.query = CANIOT_RESPONSE;
@@ -487,8 +474,7 @@ bool z_func_dev0(void)
 	CHECK(caniot_controller_query_pending(&x.ctrl, x.handle) == false);
 	CHECK(x.ctrl.pendingq.pending_devices_bf == 0U);
 	CHECK(x.ctrl.pendingq.timeout_queue == NULL);
-	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) ==
-	      CONFIG_CANIOT_MAX_PENDING_QUERIES);
+	CHECK(caniot_controller_dbg_free_pendq(&x.ctrl) == CONFIG_CANIOT_MAX_PENDING_QUERIES);
 
 	return x.success == true;
 }
@@ -503,8 +489,8 @@ struct test {
 };
 
 #define TEST(_handler, _rerolls)                                                         \
-	{                                                                                \
-		.name = #_handler, .test_handler = _handler, .rerolls = _rerolls         \
+	{                                                                                    \
+		.name = #_handler, .test_handler = _handler, .rerolls = _rerolls                 \
 	}
 
 const struct test tests[] = {
@@ -559,12 +545,12 @@ int main(void)
 
 		const bool success = failures == 0U;
 		printf("%lu:\t%s %zu/%zu  \t(%.1f %%) -- %s\n",
-		       i,
-		       success ? "OK" : "NOK",
-		       sucesses,
-		       tst->rerolls,
-		       (sucesses * 100.0) / tst->rerolls,
-		       tst->name);
+			   i,
+			   success ? "OK" : "NOK",
+			   sucesses,
+			   tst->rerolls,
+			   (sucesses * 100.0) / tst->rerolls,
+			   tst->name);
 
 		if (!success) tests_failed++;
 	}
-- 
2.41.0

